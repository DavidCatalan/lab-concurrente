BASH(1) 							       BASH(1)



NAME
       bash - GNU Bourne-Again SHell

SYNOPSIS
       bash [options] [file]

COPYRIGHT
       Bash is Copyright (C) 1989-2009 by the Free Software Foundation, Inc.

DESCRIPTION
       Bash  is  an  sh-compatible  command language interpreter that executes
       commands read from the standard input or from a file.  Bash also incor‐
       porates useful features from the Korn and C shells (ksh and csh).

       Bash  is  intended  to  be a conformant implementation of the Shell and
       Utilities portion  of  the  IEEE  POSIX	specification  (IEEE  Standard
       1003.1).  Bash can be configured to be POSIX-conformant by default.

OPTIONS
       In  addition  to  the  single-character shell options documented in the
       description of the set builtin command, bash interprets	the  following
       options when it is invoked:

       -c string If  the  -c  option  is  present, then commands are read from
		 string.  If there are arguments after the  string,  they  are
		 assigned to the positional parameters, starting with $0.
       -i	 If the -i option is present, the shell is interactive.
       -l	 Make bash act as if it had been invoked as a login shell (see
		 INVOCATION below).
       -r	 If the -r option is present,  the  shell  becomes  restricted
		 (see RESTRICTED SHELL below).
       -s	 If  the -s option is present, or if no arguments remain after
		 option processing, then commands are read from  the  standard
		 input.   This	option	allows the positional parameters to be
		 set when invoking an interactive shell.
       -D	 A list of all double-quoted strings preceded by $ is  printed
		 on  the standard output.  These are the strings that are sub‐
		 ject to language translation when the current locale is not C
		 or  POSIX.   This  implies the -n option; no commands will be
		 executed.
       [-+]O [shopt_option]
		 shopt_option is one of the  shell  options  accepted  by  the
		 shopt	 builtin  (see	SHELL  BUILTIN	COMMANDS  below).   If
		 shopt_option is present, -O sets the value of that option; +O
		 unsets  it.   If  shopt_option is not supplied, the names and
		 values of the shell options accepted by shopt are printed  on
		 the  standard	output.   If  the invocation option is +O, the
		 output is displayed in a format that may be reused as input.
       --	 A -- signals the end of options and disables  further	option
		 processing.   Any arguments after the -- are treated as file‐
		 names and arguments.  An argument of - is equivalent to --.

       Bash also  interprets  a  number  of  multi-character  options.	 These
       options	must  appear  on  the command line before the single-character
       options to be recognized.

       --debugger
	      Arrange for the debugger profile to be executed before the shell
	      starts.	Turns  on extended debugging mode (see the description
	      of the extdebug option to the shopt  builtin  below)  and  shell
	      function tracing (see the description of the -o functrace option
	      to the set builtin below).
       --dump-po-strings
	      Equivalent to -D, but the output is in the GNU gettext po  (por‐
	      table object) file format.
       --dump-strings
	      Equivalent to -D.
       --help Display  a  usage  message  on standard output and exit success‐
	      fully.
       --init-file file
       --rcfile file
	      Execute commands from file instead of the system	wide  initial‐
	      ization file /etc/bash.bashrc and the standard personal initial‐
	      ization file ~/.bashrc if the shell is interactive (see  INVOCA‐
	      TION below).

       --login
	      Equivalent to -l.

       --noediting
	      Do  not  use the GNU readline library to read command lines when
	      the shell is interactive.

       --noprofile
	      Do not read either the system-wide startup file /etc/profile  or
	      any   of	the  personal  initialization  files  ~/.bash_profile,
	      ~/.bash_login, or ~/.profile.   By  default,  bash  reads  these
	      files  when  it  is  invoked  as	a  login shell (see INVOCATION
	      below).

       --norc Do not read and execute  the  system  wide  initialization  file
	      /etc/bash.bashrc	and the personal initialization file ~/.bashrc
	      if the shell is interactive.  This option is on  by  default  if
	      the shell is invoked as sh.

       --posix
	      Change  the behavior of bash where the default operation differs
	      from the POSIX standard to match the standard (posix mode).

       --restricted
	      The shell becomes restricted (see RESTRICTED SHELL below).

       --verbose
	      Equivalent to  -v.

       --version
	      Show version information for this instance of bash on the  stan‐
	      dard output and exit successfully.

ARGUMENTS
       If arguments remain after option processing, and neither the -c nor the
       -s option has been supplied, the first argument is assumed  to  be  the
       name  of  a file containing shell commands.  If bash is invoked in this
       fashion, $0 is set to the name of the file, and the positional  parame‐
       ters  are set to the remaining arguments.  Bash reads and executes com‐
       mands from this file, then exits.  Bash's exit status is the exit  sta‐
       tus  of	the  last  command executed in the script.  If no commands are
       executed, the exit status is 0.	An attempt is first made to  open  the
       file in the current directory, and, if no file is found, then the shell
       searches the directories in PATH for the script.

      2      3      5      7     11     13     17     19     23     29 
     31     37     41     43     47     53     59     61     67     71 
     73     79     83     89     97    101    103    107    109    113 
    127    131    137    139    149    151    157    163    167    173 
    179    181    191    193    197    199    211    223    227    229 
    233    239    241    251    257    263    269    271    277    281 
    283    293    307    311    313    317    331    337    347    349 
    353    359    367    373    379    383    389    397    401    409 
    419    421    431    433    439    443    449    457    461    463 
    467    479    487    491    499    503    509    521    523    541 
    547    557    563    569    571    577    587    593    599    601 
    607    613    617    619    631    641    643    647    653    659 
    661    673    677    683    691    701    709    719    727    733 
    739    743    751    757    761    769    773    787    797    809 
    811    821    823    827    829    839    853    857    859    863 
    877    881    883    887    907    911    919    929    937    941 
    947    953    967    971    977    983    991    997   1009   1013 
   1019   1021   1031   1033   1039   1049   1051   1061   1063   1069 
   1087   1091   1093   1097   1103   1109   1117   1123   1129   1151 
   1153   1163   1171   1181   1187   1193   1201   1213   1217   1223 
   1229   1231   1237   1249   1259   1277   1279   1283   1289   1291 
   1297   1301   1303   1307   1319   1321   1327   1361   1367   1373 
   1381   1399   1409   1423   1427   1429   1433   1439   1447   1451 
   1453   1459   1471   1481   1483   1487   1489   1493   1499   1511 
   1523   1531   1543   1549   1553   1559   1567   1571   1579   1583 
   1597   1601   1607   1609   1613   1619   1621   1627   1637   1657 
   1663   1667   1669   1693   1697   1699   1709   1721   1723   1733 
   1741   1747   1753   1759   1777   1783   1787   1789   1801   1811 
   1823   1831   1847   1861   1867   1871   1873   1877   1879   1889 
   1901   1907   1913   1931   1933   1949   1951   1973   1979   1987 
   1993   1997   1999   2003   2011   2017   2027   2029   2039   2053 
   2063   2069   2081   2083   2087   2089   2099   2111   2113   2129 
   2131   2137   2141   2143   2153   2161   2179   2203   2207   2213 
   2221   2237   2239   2243   2251   2267   2269   2273   2281   2287 
   2293   2297   2309   2311   2333   2339   2341   2347   2351   2357 
   2371   2377   2381   2383   2389   2393   2399   2411   2417   2423 
   2437   2441   2447   2459   2467   2473   2477   2503   2521   2531 
   2539   2543   2549   2551   2557   2579   2591   2593   2609   2617 
   2621   2633   2647   2657   2659   2663   2671   2677   2683   2687 
   2689   2693   2699   2707   2711   2713   2719   2729   2731   2741 
   2749   2753   2767   2777   2789   2791   2797   2801   2803   2819 
   2833   2837   2843   2851   2857   2861   2879   2887   2897   2903 
   2909   2917   2927   2939   2953   2957   2963   2969   2971   2999 
   3001   3011   3019   3023   3037   3041   3049   3061   3067   3079 
   3083   3089   3109   3119   3121   3137   3163   3167   3169   3181 
   3187   3191   3203   3209   3217   3221   3229   3251   3253   3257 
   3259   3271   3299   3301   3307   3313   3319   3323   3329   3331 
   3343   3347   3359   3361   3371   3373   3389   3391   3407   3413 
   3433   3449   3457   3461   3463   3467   3469   3491   3499   3511 
   3517   3527   3529   3533   3539   3541   3547   3557   3559   3571 
   3581   3583   3593   3607   3613   3617   3623   3631   3637   3643 
   3659   3671   3673   3677   3691   3697   3701   3709   3719   3727 
   3733   3739   3761   3767   3769   3779   3793   3797   3803   3821 
   3823   3833   3847   3851   3853   3863   3877   3881   3889   3907 
   3911   3917   3919   3923   3929   3931   3943   3947   3967   3989 
   4001   4003   4007   4013   4019   4021   4027   4049   4051   4057 
   4073   4079   4091   4093   4099   4111   4127   4129   4133   4139 
   4153   4157   4159   4177   4201   4211   4217   4219   4229   4231 
   4241   4243   4253   4259   4261   4271   4273   4283   4289   4297 
   4327   4337   4339   4349   4357   4363   4373   4391   4397   4409 
   4421   4423   4441   4447   4451   4457   4463   4481   4483   4493 
   4507   4513   4517   4519   4523   4547   4549   4561   4567   4583 
   4591   4597   4603   4621   4637   4639   4643   4649   4651   4657 
   4663   4673   4679   4691   4703   4721   4723   4729   4733   4751 
   4759   4783   4787   4789   4793   4799   4801   4813   4817   4831 
   4861   4871   4877   4889   4903   4909   4919   4931   4933   4937 
   4943   4951   4957   4967   4969   4973   4987   4993   4999   5003 
   5009   5011   5021   5023   5039   5051   5059   5077   5081   5087 
   5099   5101   5107   5113   5119   5147   5153   5167   5171   5179 
   5189   5197   5209   5227   5231   5233   5237   5261   5273   5279 
   5281   5297   5303   5309   5323   5333   5347   5351   5381   5387 
   5393   5399   5407   5413   5417   5419   5431   5437   5441   5443 
   5449   5471   5477   5479   5483   5501   5503   5507   5519   5521 
   5527   5531   5557   5563   5569   5573   5581   5591   5623   5639 
   5641   5647   5651   5653   5657   5659   5669   5683   5689   5693 
   5701   5711   5717   5737   5741   5743   5749   5779   5783   5791 
   5801   5807   5813   5821   5827   5839   5843   5849   5851   5857 
   5861   5867   5869   5879   5881   5897   5903   5923   5927   5939 
   5953   5981   5987   6007   6011   6029   6037   6043   6047   6053 
   6067   6073   6079   6089   6091   6101   6113   6121   6131   6133 
   6143   6151   6163   6173   6197   6199   6203   6211   6217   6221 
   6229   6247   6257   6263   6269   6271   6277   6287   6299   6301 
   6311   6317   6323   6329   6337   6343   6353   6359   6361   6367 
   6373   6379   6389   6397   6421   6427   6449   6451   6469   6473 
   6481   6491   6521   6529   6547   6551   6553   6563   6569   6571 
   6577   6581   6599   6607   6619   6637   6653   6659   6661   6673 
   6679   6689   6691   6701   6703   6709   6719   6733   6737   6761 
   6763   6779   6781   6791   6793   6803   6823   6827   6829   6833 
   6841   6857   6863   6869   6871   6883   6899   6907   6911   6917 
   6947   6949   6959   6961   6967   6971   6977   6983   6991   6997 
   7001   7013   7019   7027   7039   7043   7057   7069   7079   7103 
   7109   7121   7127   7129   7151   7159   7177   7187   7193   7207 
   7211   7213   7219   7229   7237   7243   7247   7253   7283   7297 
   7307   7309   7321   7331   7333   7349   7351   7369   7393   7411 
   7417   7433   7451   7457   7459   7477   7481   7487   7489   7499 
   7507   7517   7523   7529   7537   7541   7547   7549   7559   7561 
   7573   7577   7583   7589   7591   7603   7607   7621   7639   7643 
   7649   7669   7673   7681   7687   7691   7699   7703   7717   7723 
   7727   7741   7753   7757   7759   7789   7793   7817   7823   7829 
   7841   7853   7867   7873   7877   7879   7883   7901   7907   7919 
   7927   7933   7937   7949   7951   7963   7993   8009   8011   8017 
   8039   8053   8059   8069   8081   8087   8089   8093   8101   8111 
   8117   8123   8147   8161   8167   8171   8179   8191   8209   8219 
   8221   8231   8233   8237   8243   8263   8269   8273   8287   8291 
   8293   8297   8311   8317   8329   8353   8363   8369   8377   8387 
   8389   8419   8423   8429   8431   8443   8447   8461   8467   8501 
   8513   8521   8527   8537   8539   8543   8563   8573   8581   8597 
   8599   8609   8623   8627   8629   8641   8647   8663   8669   8677 
   8681   8689   8693   8699   8707   8713   8719   8731   8737   8741 
   8747   8753   8761   8779   8783   8803   8807   8819   8821   8831 
   8837   8839   8849   8861   8863   8867   8887   8893   8923   8929 
   8933   8941   8951   8963   8969   8971   8999   9001   9007   9011 
   9013   9029   9041   9043   9049   9059   9067   9091   9103   9109 
   9127   9133   9137   9151   9157   9161   9173   9181   9187   9199 
   9203   9209   9221   9227   9239   9241   9257   9277   9281   9283 
   9293   9311   9319   9323   9337   9341   9343   9349   9371   9377 
   9391   9397   9403   9413   9419   9421   9431   9433   9437   9439 
   9461   9463   9467   9473   9479   9491   9497   9511   9521   9533 
   9539   9547   9551   9587   9601   9613   9619   9623   9629   9631 
   9643   9649   9661   9677   9679   9689   9697   9719   9721   9733 
   9739   9743   9749   9767   9769   9781   9787   9791   9803   9811 
   9817   9829   9833   9839   9851   9857   9859   9871   9883   9887 
   9901   9907   9923   9929   9931   9941   9949   9967   9973  10007 
  10009  10037  10039  10061  10067  10069  10079  10091  10093  10099 
  10103  10111  10133  10139  10141  10151  10159  10163  10169  10177 
  10181  10193  10211  10223  10243  10247  10253  10259  10267  10271 
  10273  10289  10301  10303  10313  10321  10331  10333  10337  10343 
  10357  10369  10391  10399  10427  10429  10433  10453  10457  10459 
  10463  10477  10487  10499  10501  10513  10529  10531  10559  10567 
  10589  10597  10601  10607  10613  10627  10631  10639  10651  10657 
  10663  10667  10687  10691  10709  10711  10723  10729  10733  10739 
  10753  10771  10781  10789  10799  10831  10837  10847  10853  10859 
  10861  10867  10883  10889  10891  10903  10909  10937  10939  10949 
  10957  10973  10979  10987  10993  11003  11027  11047  11057  11059 
  11069  11071  11083  11087  11093  11113  11117  11119  11131  11149 
  11159  11161  11171  11173  11177  11197  11213  11239  11243  11251 
  11257  11261  11273  11279  11287  11299  11311  11317  11321  11329 
  11351  11353  11369  11383  11393  11399  11411  11423  11437  11443 
  11447  11467  11471  11483  11489  11491  11497  11503  11519  11527 
  11549  11551  11579  11587  11593  11597  11617  11621  11633  11657 
  11677  11681  11689  11699  11701  11717  11719  11731  11743  11777 
  11779  11783  11789  11801  11807  11813  11821  11827  11831  11833 
  11839  11863  11867  11887  11897  11903  11909  11923  11927  11933 
  11939  11941  11953  11959  11969  11971  11981  11987  12007  12011 
  12037  12041  12043  12049  12071  12073  12097  12101  12107  12109 
  12113  12119  12143  12149  12157  12161  12163  12197  12203  12211 
  12227  12239  12241  12251  12253  12263  12269  12277  12281  12289 
  12301  12323  12329  12343  12347  12373  12377  12379  12391  12401 
  12409  12413  12421  12433  12437  12451  12457  12473  12479  12487 
  12491  12497  12503  12511  12517  12527  12539  12541  12547  12553 
  12569  12577  12583  12589  12601  12611  12613  12619  12637  12641 
  12647  12653  12659  12671  12689  12697  12703  12713  12721  12739 
  12743  12757  12763  12781  12791  12799  12809  12821  12823  12829 
  12841  12853  12889  12893  12899  12907  12911  12917  12919  12923 
  12941  12953  12959  12967  12973  12979  12983  13001  13003  13007 
  13009  13033  13037  13043  13049  13063  13093  13099  13103  13109 
  13121  13127  13147  13151  13159  13163  13171  13177  13183  13187 
  13217  13219  13229  13241  13249  13259  13267  13291  13297  13309 
  13313  13327  13331  13337  13339  13367  13381  13397  13399  13411 
  13417  13421  13441  13451  13457  13463  13469  13477  13487  13499 
  13513  13523  13537  13553  13567  13577  13591  13597  13613  13619 
  13627  13633  13649  13669  13679  13681  13687  13691  13693  13697 
  13709  13711  13721  13723  13729  13751  13757  13759  13763  13781 
  13789  13799  13807  13829  13831  13841  13859  13873  13877  13879 
  13883  13901  13903  13907  13913  13921  13931  13933  13963  13967 
  13997  13999  14009  14011  14029  14033  14051  14057  14071  14081 
  14083  14087  14107  14143  14149  14153  14159  14173  14177  14197 
  14207  14221  14243  14249  14251  14281  14293  14303  14321  14323 
  14327  14341  14347  14369  14387  14389  14401  14407  14411  14419 
  14423  14431  14437  14447  14449  14461  14479  14489  14503  14519 
  14533  14537  14543  14549  14551  14557  14561  14563  14591  14593 
  14621  14627  14629  14633  14639  14653  14657  14669  14683  14699 
  14713  14717  14723  14731  14737  14741  14747  14753  14759  14767 
  14771  14779  14783  14797  14813  14821  14827  14831  14843  14851 
  14867  14869  14879  14887  14891  14897  14923  14929  14939  14947 
  14951  14957  14969  14983  15013  15017  15031  15053  15061  15073 
  15077  15083  15091  15101  15107  15121  15131  15137  15139  15149 
  15161  15173  15187  15193  15199  15217  15227  15233  15241  15259 
  15263  15269  15271  15277  15287  15289  15299  15307  15313  15319 
  15329  15331  15349  15359  15361  15373  15377  15383  15391  15401 
  15413  15427  15439  15443  15451  15461  15467  15473  15493  15497 
  15511  15527  15541  15551  15559  15569  15581  15583  15601  15607 
  15619  15629  15641  15643  15647  15649  15661  15667  15671  15679 
  15683  15727  15731  15733  15737  15739  15749  15761  15767  15773 
  15787  15791  15797  15803  15809  15817  15823  15859  15877  15881 
  15887  15889  15901  15907  15913  15919  15923  15937  15959  15971 
  15973  15991  16001  16007  16033  16057  16061  16063  16067  16069 
  16073  16087  16091  16097  16103  16111  16127  16139  16141  16183 
  16187  16189  16193  16217  16223  16229  16231  16249  16253  16267 
  16273  16301  16319  16333  16339  16349  16361  16363  16369  16381 
  16411  16417  16421  16427  16433  16447  16451  16453  16477  16481 
  16487  16493  16519  16529  16547  16553  16561  16567  16573  16603 
  16607  16619  16631  16633  16649  16651  16657  16661  16673  16691 
  16693  16699  16703  16729  16741  16747  16759  16763  16787  16811 
  16823  16829  16831  16843  16871  16879  16883  16889  16901  16903 
  16921  16927  16931  16937  16943  16963  16979  16981  16987  16993 
  17011  17021  17027  17029  17033  17041  17047  17053  17077  17093 
  17099  17107  17117  17123  17137  17159  17167  17183  17189  17191 
  17203  17207  17209  17231  17239  17257  17291  17293  17299  17317 
  17321  17327  17333  17341  17351  17359  17377  17383  17387  17389 
  17393  17401  17417  17419  17431  17443  17449  17467  17471  17477 
  17483  17489  17491  17497  17509  17519  17539  17551  17569  17573 
  17579  17581  17597  17599  17609  17623  17627  17657  17659  17669 
  17681  17683  17707  17713  17729  17737  17747  17749  17761  17783 
  17789  17791  17807  17827  17837  17839  17851  17863  17881  17891 
  17903  17909  17911  17921  17923  17929  17939  17957  17959  17971 
  17977  17981  17987  17989  18013  18041  18043  18047  18049  18059 
  18061  18077  18089  18097  18119  18121  18127  18131  18133  18143 
  18149  18169  18181  18191  18199  18211  18217  18223  18229  18233 
  18251  18253  18257  18269  18287  18289  18301  18307  18311  18313 
  18329  18341  18353  18367  18371  18379  18397  18401  18413  18427 
  18433  18439  18443  18451  18457  18461  18481  18493  18503  18517 
  18521  18523  18539  18541  18553  18583  18587  18593  18617  18637 
  18661  18671  18679  18691  18701  18713  18719  18731  18743  18749 
  18757  18773  18787  18793  18797  18803  18839  18859  18869  18899 
  18911  18913  18917  18919  18947  18959  18973  18979  19001  19009 
  19013  19031  19037  19051  19069  19073  19079  19081  19087  19121 
  19139  19141  19157  19163  19181  19183  19207  19211  19213  19219 
  19231  19237  19249  19259  19267  19273  19289  19301  19309  19319 
  19333  19373  19379  19381  19387  19391  19403  19417  19421  19423 
  19427  19429  19433  19441  19447  19457  19463  19469  19471  19477 
  19483  19489  19501  19507  19531  19541  19543  19553  19559  19571 
  19577  19583  19597  19603  19609  19661  19681  19687  19697  19699 
  19709  19717  19727  19739  19751  19753  19759  19763  19777  19793 
  19801  19813  19819  19841  19843  19853  19861  19867  19889  19891 
  19913  19919  19927  19937  19949  19961  19963  19973  19979  19991 
  19993  19997  

      2      3      5      7     11     13     17     19     23     29 
     31     37     41     43     47     53     59     61     67     71 
     73     79     83     89     97    101    103    107    109    113 
    127    131    137    139    149    151    157    163    167    173 
    179    181    191    193    197    199    211    223    227    229 
    233    239    241    251    257    263    269    271    277    281 
    283    293    307    311    313    317    331    337    347    349 
    353    359    367    373    379    383    389    397    401    409 
    419    421    431    433    439    443    449    457    461    463 
    467    479    487    491    499    503    509    521    523    541 
    547    557    563    569    571    577    587    593    599    601 
    607    613    617    619    631    641    643    647    653    659 
    661    673    677    683    691    701    709    719    727    733 
    739    743    751    757    761    769    773    787    797    809 
    811    821    823    827    829    839    853    857    859    863 
    877    881    883    887    907    911    919    929    937    941 
    947    953    967    971    977    983    991    997   1009   1013 
   1019   1021   1031   1033   1039   1049   1051   1061   1063   1069 
   1087   1091   1093   1097   1103   1109   1117   1123   1129   1151 
   1153   1163   1171   1181   1187   1193   1201   1213   1217   1223 
   1229   1231   1237   1249   1259   1277   1279   1283   1289   1291 
   1297   1301   1303   1307   1319   1321   1327   1361   1367   1373 
   1381   1399   1409   1423   1427   1429   1433   1439   1447   1451 
   1453   1459   1471   1481   1483   1487   1489   1493   1499   1511 
   1523   1531   1543   1549   1553   1559   1567   1571   1579   1583 
   1597   1601   1607   1609   1613   1619   1621   1627   1637   1657 
   1663   1667   1669   1693   1697   1699   1709   1721   1723   1733 
   1741   1747   1753   1759   1777   1783   1787   1789   1801   1811 
   1823   1831   1847   1861   1867   1871   1873   1877   1879   1889 
   1901   1907   1913   1931   1933   1949   1951   1973   1979   1987 
   1993   1997   1999   2003   2011   2017   2027   2029   2039   2053 
   2063   2069   2081   2083   2087   2089   2099   2111   2113   2129 
   2131   2137   2141   2143   2153   2161   2179   2203   2207   2213 
   2221   2237   2239   2243   2251   2267   2269   2273   2281   2287 
   2293   2297   2309   2311   2333   2339   2341   2347   2351   2357 
   2371   2377   2381   2383   2389   2393   2399   2411   2417   2423 
   2437   2441   2447   2459   2467   2473   2477   2503   2521   2531 
   2539   2543   2549   2551   2557   2579   2591   2593   2609   2617 
   2621   2633   2647   2657   2659   2663   2671   2677   2683   2687 
   2689   2693   2699   2707   2711   2713   2719   2729   2731   2741 
   2749   2753   2767   2777   2789   2791   2797   2801   2803   2819 
   2833   2837   2843   2851   2857   2861   2879   2887   2897   2903 
   2909   2917   2927   2939   2953   2957   2963   2969   2971   2999 
   3001   3011   3019   3023   3037   3041   3049   3061   3067   3079 
   3083   3089   3109   3119   3121   3137   3163   3167   3169   3181 
   3187   3191   3203   3209   3217   3221   3229   3251   3253   3257 
   3259   3271   3299   3301   3307   3313   3319   3323   3329   3331 
   3343   3347   3359   3361   3371   3373   3389   3391   3407   3413 
   3433   3449   3457   3461   3463   3467   3469   3491   3499   3511 
   3517   3527   3529   3533   3539   3541   3547   3557   3559   3571 
   3581   3583   3593   3607   3613   3617   3623   3631   3637   3643 
   3659   3671   3673   3677   3691   3697   3701   3709   3719   3727 
   3733   3739   3761   3767   3769   3779   3793   3797   3803   3821 
   3823   3833   3847   3851   3853   3863   3877   3881   3889   3907 
   3911   3917   3919   3923   3929   3931   3943   3947   3967   3989 
   4001   4003   4007   4013   4019   4021   4027   4049   4051   4057 
   4073   4079   4091   4093   4099   4111   4127   4129   4133   4139 
   4153   4157   4159   4177   4201   4211   4217   4219   4229   4231 
   4241   4243   4253   4259   4261   4271   4273   4283   4289   4297 
   4327   4337   4339   4349   4357   4363   4373   4391   4397   4409 
   4421   4423   4441   4447   4451   4457   4463   4481   4483   4493 
   4507   4513   4517   4519   4523   4547   4549   4561   4567   4583 
   4591   4597   4603   4621   4637   4639   4643   4649   4651   4657 
   4663   4673   4679   4691   4703   4721   4723   4729   4733   4751 
   4759   4783   4787   4789   4793   4799   4801   4813   4817   4831 
   4861   4871   4877   4889   4903   4909   4919   4931   4933   4937 
   4943   4951   4957   4967   4969   4973   4987   4993   4999   5003 
   5009   5011   5021   5023   5039   5051   5059   5077   5081   5087 
   5099   5101   5107   5113   5119   5147   5153   5167   5171   5179 
   5189   5197   5209   5227   5231   5233   5237   5261   5273   5279 
   5281   5297   5303   5309   5323   5333   5347   5351   5381   5387 
   5393   5399   5407   5413   5417   5419   5431   5437   5441   5443 
   5449   5471   5477   5479   5483   5501   5503   5507   5519   5521 
   5527   5531   5557   5563   5569   5573   5581   5591   5623   5639 
   5641   5647   5651   5653   5657   5659   5669   5683   5689   5693 
   5701   5711   5717   5737   5741   5743   5749   5779   5783   5791 
   5801   5807   5813   5821   5827   5839   5843   5849   5851   5857 
   5861   5867   5869   5879   5881   5897   5903   5923   5927   5939 
   5953   5981   5987   6007   6011   6029   6037   6043   6047   6053 
   6067   6073   6079   6089   6091   6101   6113   6121   6131   6133 
   6143   6151   6163   6173   6197   6199   6203   6211   6217   6221 
   6229   6247   6257   6263   6269   6271   6277   6287   6299   6301 
   6311   6317   6323   6329   6337   6343   6353   6359   6361   6367 
   6373   6379   6389   6397   6421   6427   6449   6451   6469   6473 
   6481   6491   6521   6529   6547   6551   6553   6563   6569   6571 
   6577   6581   6599   6607   6619   6637   6653   6659   6661   6673 
   6679   6689   6691   6701   6703   6709   6719   6733   6737   6761 
   6763   6779   6781   6791   6793   6803   6823   6827   6829   6833 
   6841   6857   6863   6869   6871   6883   6899   6907   6911   6917 
   6947   6949   6959   6961   6967   6971   6977   6983   6991   6997 
   7001   7013   7019   7027   7039   7043   7057   7069   7079   7103 
   7109   7121   7127   7129   7151   7159   7177   7187   7193   7207 
   7211   7213   7219   7229   7237   7243   7247   7253   7283   7297 
   7307   7309   7321   7331   7333   7349   7351   7369   7393   7411 
   7417   7433   7451   7457   7459   7477   7481   7487   7489   7499 
   7507   7517   7523   7529   7537   7541   7547   7549   7559   7561 
   7573   7577   7583   7589   7591   7603   7607   7621   7639   7643 
   7649   7669   7673   7681   7687   7691   7699   7703   7717   7723 
   7727   7741   7753   7757   7759   7789   7793   7817   7823   7829 
   7841   7853   7867   7873   7877   7879   7883   7901   7907   7919 
   7927   7933   7937   7949   7951   7963   7993   8009   8011   8017 
   8039   8053   8059   8069   8081   8087   8089   8093   8101   8111 
   8117   8123   8147   8161   8167   8171   8179   8191   8209   8219 
   8221   8231   8233   8237   8243   8263   8269   8273   8287   8291 
   8293   8297   8311   8317   8329   8353   8363   8369   8377   8387 
   8389   8419   8423   8429   8431   8443   8447   8461   8467   8501 
   8513   8521   8527   8537   8539   8543   8563   8573   8581   8597 
   8599   8609   8623   8627   8629   8641   8647   8663   8669   8677 
   8681   8689   8693   8699   8707   8713   8719   8731   8737   8741 
   8747   8753   8761   8779   8783   8803   8807   8819   8821   8831 
   8837   8839   8849   8861   8863   8867   8887   8893   8923   8929 
   8933   8941   8951   8963   8969   8971   8999   9001   9007   9011 
   9013   9029   9041   9043   9049   9059   9067   9091   9103   9109 
   9127   9133   9137   9151   9157   9161   9173   9181   9187   9199 
   9203   9209   9221   9227   9239   9241   9257   9277   9281   9283 
   9293   9311   9319   9323   9337   9341   9343   9349   9371   9377 
   9391   9397   9403   9413   9419   9421   9431   9433   9437   9439 
   9461   9463   9467   9473   9479   9491   9497   9511   9521   9533 
   9539   9547   9551   9587   9601   9613   9619   9623   9629   9631 
   9643   9649   9661   9677   9679   9689   9697   9719   9721   9733 
   9739   9743   9749   9767   9769   9781   9787   9791   9803   9811 
   9817   9829   9833   9839   9851   9857   9859   9871   9883   9887 
   9901   9907   9923   9929   9931   9941   9949   9967   9973  10007 
  10009  10037  10039  10061  10067  10069  10079  10091  10093  10099 
  10103  10111  10133  10139  10141  10151  10159  10163  10169  10177 
  10181  10193  10211  10223  10243  10247  10253  10259  10267  10271 
  10273  10289  10301  10303  10313  10321  10331  10333  10337  10343 
  10357  10369  10391  10399  10427  10429  10433  10453  10457  10459 
  10463  10477  10487  10499  10501  10513  10529  10531  10559  10567 
  10589  10597  10601  10607  10613  10627  10631  10639  10651  10657 
  10663  10667  10687  10691  10709  10711  10723  10729  10733  10739 
  10753  10771  10781  10789  10799  10831  10837  10847  10853  10859 
  10861  10867  10883  10889  10891  10903  10909  10937  10939  10949 
  10957  10973  10979  10987  10993  11003  11027  11047  11057  11059 
  11069  11071  11083  11087  11093  11113  11117  11119  11131  11149 
  11159  11161  11171  11173  11177  11197  11213  11239  11243  11251 
  11257  11261  11273  11279  11287  11299  11311  11317  11321  11329 
  11351  11353  11369  11383  11393  11399  11411  11423  11437  11443 
  11447  11467  11471  11483  11489  11491  11497  11503  11519  11527 
  11549  11551  11579  11587  11593  11597  11617  11621  11633  11657 
  11677  11681  11689  11699  11701  11717  11719  11731  11743  11777 
  11779  11783  11789  11801  11807  11813  11821  11827  11831  11833 
  11839  11863  11867  11887  11897  11903  11909  11923  11927  11933 
  11939  11941  11953  11959  11969  11971  11981  11987  12007  12011 
  12037  12041  12043  12049  12071  12073  12097  12101  12107  12109 
  12113  12119  12143  12149  12157  12161  12163  12197  12203  12211 
  12227  12239  12241  12251  12253  12263  12269  12277  12281  12289 
  12301  12323  12329  12343  12347  12373  12377  12379  12391  12401 
  12409  12413  12421  12433  12437  12451  12457  12473  12479  12487 
  12491  12497  12503  12511  12517  12527  12539  12541  12547  12553 
  12569  12577  12583  12589  12601  12611  12613  12619  12637  12641 
  12647  12653  12659  12671  12689  12697  12703  12713  12721  12739 
  12743  12757  12763  12781  12791  12799  12809  12821  12823  12829 
  12841  12853  12889  12893  12899  12907  12911  12917  12919  12923 
  12941  12953  12959  12967  12973  12979  12983  13001  13003  13007 
  13009  13033  13037  13043  13049  13063  13093  13099  13103  13109 
  13121  13127  13147  13151  13159  13163  13171  13177  13183  13187 
  13217  13219  13229  13241  13249  13259  13267  13291  13297  13309 
  13313  13327  13331  13337  13339  13367  13381  13397  13399  13411 
  13417  13421  13441  13451  13457  13463  13469  13477  13487  13499 
  13513  13523  13537  13553  13567  13577  13591  13597  13613  13619 
  13627  13633  13649  13669  13679  13681  13687  13691  13693  13697 
  13709  13711  13721  13723  13729  13751  13757  13759  13763  13781 
  13789  13799  13807  13829  13831  13841  13859  13873  13877  13879 
  13883  13901  13903  13907  13913  13921  13931  13933  13963  13967 
  13997  13999  14009  14011  14029  14033  14051  14057  14071  14081 
  14083  14087  14107  14143  14149  14153  14159  14173  14177  14197 
  14207  14221  14243  14249  14251  14281  14293  14303  14321  14323 
  14327  14341  14347  14369  14387  14389  14401  14407  14411  14419 
  14423  14431  14437  14447  14449  14461  14479  14489  14503  14519 
  14533  14537  14543  14549  14551  14557  14561  14563  14591  14593 
  14621  14627  14629  14633  14639  14653  14657  14669  14683  14699 
  14713  14717  14723  14731  14737  14741  14747  14753  14759  14767 
  14771  14779  14783  14797  14813  14821  14827  14831  14843  14851 
  14867  14869  14879  14887  14891  14897  14923  14929  14939  14947 
  14951  14957  14969  14983  15013  15017  15031  15053  15061  15073 
  15077  15083  15091  15101  15107  15121  15131  15137  15139  15149 
  15161  15173  15187  15193  15199  15217  15227  15233  15241  15259 
  15263  15269  15271  15277  15287  15289  15299  15307  15313  15319 
  15329  15331  15349  15359  15361  15373  15377  15383  15391  15401 
  15413  15427  15439  15443  15451  15461  15467  15473  15493  15497 
  15511  15527  15541  15551  15559  15569  15581  15583  15601  15607 
  15619  15629  15641  15643  15647  15649  15661  15667  15671  15679 
  15683  15727  15731  15733  15737  15739  15749  15761  15767  15773 
  15787  15791  15797  15803  15809  15817  15823  15859  15877  15881 
  15887  15889  15901  15907  15913  15919  15923  15937  15959  15971 
  15973  15991  16001  16007  16033  16057  16061  16063  16067  16069 
  16073  16087  16091  16097  16103  16111  16127  16139  16141  16183 
  16187  16189  16193  16217  16223  16229  16231  16249  16253  16267 
  16273  16301  16319  16333  16339  16349  16361  16363  16369  16381 
  16411  16417  16421  16427  16433  16447  16451  16453  16477  16481 
  16487  16493  16519  16529  16547  16553  16561  16567  16573  16603 
  16607  16619  16631  16633  16649  16651  16657  16661  16673  16691 
  16693  16699  16703  16729  16741  16747  16759  16763  16787  16811 
  16823  16829  16831  16843  16871  16879  16883  16889  16901  16903 
  16921  16927  16931  16937  16943  16963  16979  16981  16987  16993 
  17011  17021  17027  17029  17033  17041  17047  17053  17077  17093 
  17099  17107  17117  17123  17137  17159  17167  17183  17189  17191 
  17203  17207  17209  17231  17239  17257  17291  17293  17299  17317 
  17321  17327  17333  17341  17351  17359  17377  17383  17387  17389 
  17393  17401  17417  17419  17431  17443  17449  17467  17471  17477 
  17483  17489  17491  17497  17509  17519  17539  17551  17569  17573 
  17579  17581  17597  17599  17609  17623  17627  17657  17659  17669 
  17681  17683  17707  17713  17729  17737  17747  17749  17761  17783 
  17789  17791  17807  17827  17837  17839  17851  17863  17881  17891 
  17903  17909  17911  17921  17923  17929  17939  17957  17959  17971 
  17977  17981  17987  17989  18013  18041  18043  18047  18049  18059 
  18061  18077  18089  18097  18119  18121  18127  18131  18133  18143 
  18149  18169  18181  18191  18199  18211  18217  18223  18229  18233 
  18251  18253  18257  18269  18287  18289  18301  18307  18311  18313 
  18329  18341  18353  18367  18371  18379  18397  18401  18413  18427 
  18433  18439  18443  18451  18457  18461  18481  18493  18503  18517 
  18521  18523  18539  18541  18553  18583  18587  18593  18617  18637 
  18661  18671  18679  18691  18701  18713  18719  18731  18743  18749 
  18757  18773  18787  18793  18797  18803  18839  18859  18869  18899 
  18911  18913  18917  18919  18947  18959  18973  18979  19001  19009 
  19013  19031  19037  19051  19069  19073  19079  19081  19087  19121 
  19139  19141  19157  19163  19181  19183  19207  19211  19213  19219 
  19231  19237  19249  19259  19267  19273  19289  19301  19309  19319 
  19333  19373  19379  19381  19387  19391  19403  19417  19421  19423 
  19427  19429  19433  19441  19447  19457  19463  19469  19471  19477 
  19483  19489  19501  19507  19531  19541  19543  19553  19559  19571 
  19577  19583  19597  19603  19609  19661  19681  19687  19697  19699 
  19709  19717  19727  19739  19751  19753  19759  19763  19777  19793 
  19801  19813  19819  19841  19843  19853  19861  19867  19889  19891 
  19913  19919  19927  19937  19949  19961  19963  19973  19979  19991 
  19993  19997  

end.

INVOCATION
       A login shell is one whose first character of argument zero is a -,  or
       one started with the --login option.

       An  interactive	shell  is one started without non-option arguments and
       without the -c option whose standard input and error are both connected
       to  terminals  (as determined by isatty(3)), or one started with the -i
       option.	PS1 is set and $- includes i if bash is interactive,  allowing
       a shell script or a startup file to test this state.

       The  following paragraphs describe how bash executes its startup files.
       If any of the files exist but cannot be read, bash  reports  an	error.
       Tildes are expanded in file names as described below under Tilde Expan‐
       sion in the EXPANSION section.

       When bash is invoked as an interactive login shell, or as a  non-inter‐
       active  shell with the --login option, it first reads and executes com‐
       mands from the file /etc/profile, if that file exists.	After  reading
       that file, it looks for ~/.bash_profile, ~/.bash_login, and ~/.profile,
       in that order, and reads and executes commands from the first one  that
       exists  and  is	readable.  The --noprofile option may be used when the
       shell is started to inhibit this behavior.

       When a login shell exits, bash reads and  executes  commands  from  the
       file ~/.bash_logout, if it exists.

       When  an  interactive  shell that is not a login shell is started, bash
       reads and executes commands from  /etc/bash.bashrc  and	~/.bashrc,  if
       these  files  exist.  This may be inhibited by using the --norc option.
       The --rcfile file option will force bash to read and  execute  commands
       from file instead of /etc/bash.bashrc and ~/.bashrc.

       When  bash  is  started	non-interactively,  to run a shell script, for
       example, it looks for the variable BASH_ENV in the environment, expands
       its  value if it appears there, and uses the expanded value as the name
       of a file to read and execute.  Bash behaves as if the  following  com‐
       mand were executed:
	      if [ -n "$BASH_ENV" ]; then . "$BASH_ENV"; fi
       but  the  value of the PATH variable is not used to search for the file
       name.

       If bash is invoked with the name sh, it	tries  to  mimic  the  startup
       behavior  of  historical  versions  of sh as closely as possible, while
       conforming to the POSIX standard as well.  When invoked as an  interac‐
       tive  login  shell, or a non-interactive shell with the --login option,
       it first attempts to read and execute commands  from  /etc/profile  and
       ~/.profile,  in	that  order.   The  --noprofile  option may be used to
       inhibit this behavior.  When invoked as an interactive shell  with  the
       name  sh,  bash	looks for the variable ENV, expands its value if it is
       defined, and uses the expanded value as the name of a file to read  and
       execute.  Since a shell invoked as sh does not attempt to read and exe‐
       cute commands from any other startup files, the --rcfile option has  no
       effect.	 A  non-interactive  shell  invoked  with the name sh does not
       attempt to read any other startup files.   When	invoked  as  sh,  bash
       enters posix mode after the startup files are read.

       When  bash  is  started in posix mode, as with the --posix command line
       option, it follows the POSIX standard for startup files.  In this mode,
       interactive  shells  expand  the ENV variable and commands are read and
       executed from the file whose name is  the  expanded  value.   No  other
       startup files are read.

       Bash attempts to determine when it is being run with its standard input
       connected to a a network connection, as if by the remote shell  daemon,
       usually	rshd,  or the secure shell daemon sshd.  If bash determines it
       is being run in this fashion,  it  reads  and  executes	commands  from
       ~/.bashrc  and  ~/.bashrc,  if  these files exist and are readable.  It
       will not do this if invoked as sh.  The --norc option may  be  used  to
       inhibit	this  behavior,  and  the --rcfile option may be used to force
       another file to be read, but rshd does not generally invoke  the  shell
       with those options or allow them to be specified.

       If the shell is started with the effective user (group) id not equal to
       the real user (group) id, and the -p option is not supplied, no startup
       files are read, shell functions are not inherited from the environment,
       the SHELLOPTS, BASHOPTS, CDPATH,  and  GLOBIGNORE  variables,  if  they
       appear  in  the	environment, are ignored, and the effective user id is
       set to the real user id.  If the -p option is supplied  at  invocation,
       the  startup  behavior  is  the	same, but the effective user id is not
       reset.

DEFINITIONS
       The following definitions are used throughout the rest  of  this  docu‐
       ment.
       blank  A space or tab.
       word   A  sequence  of  characters  considered  as a single unit by the
	      shell.  Also known as a token.
       name   A word consisting only of  alphanumeric  characters  and	under‐
	      scores,  and beginning with an alphabetic character or an under‐
	      score.  Also referred to as an identifier.
       metacharacter
	      A character that, when unquoted, separates words.   One  of  the
	      following:
	      |  & ; ( ) < > space tab
       control operator
	      A token that performs a control function.  It is one of the fol‐
	      lowing symbols:
	      || & && ; ;; ( ) | |& <newline>

RESERVED WORDS
       Reserved words are words that have a special meaning to the shell.  The
       following words are recognized as reserved when unquoted and either the
       first word of a simple command (see SHELL GRAMMAR below) or  the  third
       word of a case or for command:

       !  case	do done elif else esac fi for function if in select then until
       while { } time [[ ]]

SHELL GRAMMAR
   Simple Commands
       A simple command is a sequence of optional  variable  assignments  fol‐
       lowed  by  blank-separated  words and redirections, and terminated by a
       control operator.  The first word specifies the command to be executed,
       and  is	passed	as  argument  zero.  The remaining words are passed as
       arguments to the invoked command.

       The return value of a simple command is its exit status,  or  128+n  if
       the command is terminated by signal n.

   Pipelines
       A  pipeline  is	a sequence of one or more commands separated by one of
       the control operators | or |&.  The format for a pipeline is:

	      [time [-p]] [ ! ] command [ [|⎪|&] command2 ... ]

       The standard output of command is connected via a pipe to the  standard
       input  of  command2.   This connection is performed before any redirec‐
       tions specified by the command (see REDIRECTION below).	If |& is used,
       the standard error of command is connected to command2's standard input
       through the pipe; it is shorthand for 2>&1 |.  This implicit  redirect‐
       ion of the standard error is performed after any redirections specified
       by the command.

       The return status of a pipeline is the exit status of the last command,
       unless  the  pipefail  option  is enabled.  If pipefail is enabled, the
       pipeline's return status is the value of the last  (rightmost)  command
       to  exit  with a non-zero status, or zero if all commands exit success‐
       fully.  If the reserved word !  precedes a pipeline, the exit status of
       that  pipeline  is the logical negation of the exit status as described
       above.  The shell waits for all commands in the pipeline  to  terminate
       before returning a value.

       If  the	time reserved word precedes a pipeline, the elapsed as well as
       user and system time consumed by its execution are  reported  when  the
       pipeline  terminates.   The -p option changes the output format to that
       specified by POSIX.  The TIMEFORMAT variable may be  set  to  a	format
       string  that  specifies how the timing information should be displayed;
       see the description of TIMEFORMAT under Shell Variables below.

       Each command in a pipeline is executed as a separate process (i.e.,  in
       a subshell).

   Lists
       A  list	is a sequence of one or more pipelines separated by one of the
       operators ;, &, &&, or ⎪⎪, and optionally terminated by one of ;, &, or
       <newline>.

       Of these list operators, && and ⎪⎪ have equal precedence, followed by ;
       and &, which have equal precedence.

       A sequence of one or more newlines may appear in a list	instead  of  a
       semicolon to delimit commands.

       If  a  command  is terminated by the control operator &, the shell exe‐
       cutes the command in the background in a subshell.  The shell does  not
       wait  for  the command to finish, and the return status is 0.  Commands
       separated by a ; are executed sequentially; the shell  waits  for  each
       command	to terminate in turn.  The return status is the exit status of
       the last command executed.

       AND and OR lists are sequences of one of more  pipelines  separated  by
       the  &&	and  ⎪⎪ control operators, respectively.  AND and OR lists are
       executed with left associativity.  An AND list has the form

	      command1 && command2

       command2 is executed if, and only if, command1 returns an  exit	status
       of zero.

       An OR list has the form

	      command1 ⎪⎪ command2

       command2  is  executed  if and only if command1 returns a non-zero exit
       status.	The return status of AND and OR lists is the  exit  status  of
       the last command executed in the list.

   Compound Commands
       A compound command is one of the following:

       (list) list  is	executed in a subshell environment (see COMMAND EXECU‐
	      TION ENVIRONMENT below).	Variable assignments and builtin  com‐
	      mands  that  affect  the	shell's  environment  do not remain in
	      effect after the command completes.  The return  status  is  the
	      exit status of list.

       { list; }
	      list  is simply executed in the current shell environment.  list
	      must be terminated with a newline or semicolon.  This  is  known
	      as  a  group  command.   The return status is the exit status of
	      list.  Note that unlike the metacharacters ( and ), { and }  are
	      reserved words and must occur where a reserved word is permitted
	      to be recognized.  Since they do not cause a  word  break,  they
	      must  be	separated  from  list  by  whitespace or another shell
	      metacharacter.

       ((expression))
	      The expression is evaluated according  to  the  rules  described
	      below  under ARITHMETIC EVALUATION.  If the value of the expres‐
	      sion is non-zero, the return status is 0; otherwise  the	return
	      status is 1.  This is exactly equivalent to let "expression".

       [[ expression ]]
	      Return  a  status  of  0 or 1 depending on the evaluation of the
	      conditional expression expression.  Expressions are composed  of
	      the  primaries  described  below	under CONDITIONAL EXPRESSIONS.
	      Word splitting and pathname expansion are not performed  on  the
	      words  between  the  [[  and  ]]; tilde expansion, parameter and
	      variable expansion, arithmetic expansion, command  substitution,
	      process  substitution,  and quote removal are performed.	Condi‐
	      tional operators such as -f must be unquoted to be recognized as
	      primaries.

	      When  used with [[, The < and > operators sort lexicographically
	      using the current locale.

	      When the == and != operators are used, the string to  the  right
	      of the operator is considered a pattern and matched according to
	      the rules described below under Pattern Matching.  If the  shell
	      option  nocasematch  is  enabled, the match is performed without
	      regard to the case of alphabetic characters.  The  return  value
	      is  0 if the string matches (==) or does not match (!=) the pat‐
	      tern, and 1 otherwise.  Any part of the pattern may be quoted to
	      force it to be matched as a string.

	      An  additional  binary operator, =~, is available, with the same
	      precedence as == and !=.	When it is used,  the  string  to  the
	      right  of the operator is considered an extended regular expres‐
	      sion and matched accordingly (as in regex(3)).  The return value
	      is 0 if the string matches the pattern, and 1 otherwise.	If the
	      regular expression is syntactically incorrect,  the  conditional
	      expression's return value is 2.  If the shell option nocasematch
	      is enabled, the match is performed without regard to the case of
	      alphabetic characters.  Any part of the pattern may be quoted to
	      force it to be matched  as  a  string.   Substrings  matched  by
	      parenthesized  subexpressions  within the regular expression are
	      saved in	the  array  variable  BASH_REMATCH.   The  element  of
	      BASH_REMATCH  with index 0 is the portion of the string matching
	      the entire regular expression.  The element of BASH_REMATCH with
	      index  n is the portion of the string matching the nth parenthe‐
	      sized subexpression.

	      Expressions may  be  combined  using  the  following  operators,
	      listed in decreasing order of precedence:

	      ( expression )
		     Returns  the  value  of  expression.  This may be used to
		     override the normal precedence of operators.
	      ! expression
		     True if expression is false.
	      expression1 && expression2
		     True if both expression1 and expression2 are true.
	      expression1 || expression2
		     True if either expression1 or expression2 is true.

	      The && and || operators do not evaluate expression2 if the value
	      of  expression1  is  sufficient to determine the return value of
	      the entire conditional expression.

       for name [ [ in [ word ... ] ] ; ] do list ; done
	      The list of words following in is expanded, generating a list of
	      items.  The variable name is set to each element of this list in
	      turn, and list is executed each time.  If the in word  is  omit‐
	      ted,  the  for  command  executes  list once for each positional
	      parameter that is set (see PARAMETERS below).  The return status
	      is  the  exit  status of the last command that executes.	If the
	      expansion of the items following in results in an empty list, no
	      commands are executed, and the return status is 0.

       for (( expr1 ; expr2 ; expr3 )) ; do list ; done
	      First, the arithmetic expression expr1 is evaluated according to
	      the rules described  below  under  ARITHMETIC  EVALUATION.   The
	      arithmetic  expression  expr2 is then evaluated repeatedly until
	      it evaluates to zero.  Each time expr2 evaluates to  a  non-zero
	      value,  list  is executed and the arithmetic expression expr3 is
	      evaluated.  If any expression is omitted, it behaves  as	if  it
	      evaluates to 1.  The return value is the exit status of the last
	      command in list that is executed, or false if any of the expres‐
	      sions is invalid.

       select name [ in word ] ; do list ; done
	      The list of words following in is expanded, generating a list of
	      items.  The set of expanded words is  printed  on  the  standard
	      error,  each  preceded  by a number.  If the in word is omitted,
	      the positional parameters are printed  (see  PARAMETERS  below).
	      The  PS3 prompt is then displayed and a line read from the stan‐
	      dard input.  If the line consists of a number  corresponding  to
	      one  of  the  displayed  words, then the value of name is set to
	      that word.  If the line is empty, the words and prompt are  dis‐
	      played again.  If EOF is read, the command completes.  Any other
	      value read causes name to be set to  null.   The	line  read  is
	      saved  in  the  variable REPLY.  The list is executed after each
	      selection until a break command is executed.  The exit status of
	      select  is the exit status of the last command executed in list,
	      or zero if no commands were executed.

       case word in [ [(] pattern [ | pattern ] ... ) list ;; ] ... esac
	      A case command first expands word, and tries to match it against
	      each pattern in turn, using the same matching rules as for path‐
	      name expansion (see Pathname  Expansion  below).	 The  word  is
	      expanded	using  tilde  expansion, parameter and variable expan‐
	      sion, arithmetic	substitution,  command	substitution,  process
	      substitution  and  quote	removal.   Each  pattern  examined  is
	      expanded using tilde expansion, parameter  and  variable	expan‐
	      sion, arithmetic substitution, command substitution, and process
	      substitution.  If the shell option nocasematch is  enabled,  the
	      match  is  performed  without  regard  to the case of alphabetic
	      characters.  When a match is found, the  corresponding  list  is
	      executed.  If the ;; operator is used, no subsequent matches are
	      attempted after the first pattern match.	Using ;& in  place  of
	      ;;  causes  execution  to continue with the list associated with
	      the next set of patterns.  Using ;;& in place of ;;  causes  the
	      shell  to  test  the next pattern list in the statement, if any,
	      and execute any associated list on a successful match.  The exit
	      status is zero if no pattern matches.  Otherwise, it is the exit
	      status of the last command executed in list.

       if list; then list; [ elif list; then list; ] ... [ else list; ] fi
	      The if list is executed.	If its exit status is zero,  the  then
	      list  is	executed.   Otherwise,	each  elif list is executed in
	      turn, and if its exit status is  zero,  the  corresponding  then
	      list is executed and the command completes.  Otherwise, the else
	      list is executed, if present.  The exit status is the exit  sta‐
	      tus of the last command executed, or zero if no condition tested
	      true.

       while list; do list; done
       until list; do list; done
	      The while command continuously executes the do list as  long  as
	      the  last  command  in list returns an exit status of zero.  The
	      until command is identical to the while command, except that the
	      test  is	negated;  the  do list is executed as long as the last
	      command in list returns a non-zero exit status.  The exit status
	      of  the  while and until commands is the exit status of the last
	      do list command executed, or zero if none was executed.

   Coprocesses
       A coprocess is a shell command preceded by the coproc reserved word.  A
       coprocess  is  executed asynchronously in a subshell, as if the command
       had been terminated with the & control operator, with  a  two-way  pipe
       established between the executing shell and the coprocess.

       The format for a coprocess is:

	      coproc [NAME] command [redirections]

       This  creates  a  coprocess  named  NAME.  If NAME is not supplied, the
       default name is COPROC.	NAME must not be supplied if command is a sim‐
       ple command (see above); otherwise, it is interpreted as the first word
       of the simple command.  When the coproc is executed, the shell  creates
       an  array  variable (see Arrays below) named NAME in the context of the
       executing shell.  The standard output of command  is  connected	via  a
       pipe  to  a  file  descriptor  in  the  executing  shell, and that file
       descriptor is assigned to NAME[0].  The standard input  of  command  is
       connected  via  a pipe to a file descriptor in the executing shell, and
       that file descriptor is assigned to NAME[1].  This pipe is  established
       before  any  redirections  specified  by  the  command (see REDIRECTION
       below).	The file descriptors can be utilized  as  arguments  to  shell
       commands  and redirections using standard word expansions.  The process
       id of the shell spawned to execute the coprocess is  available  as  the
       value  of  the variable NAME_PID.  The wait builtin command may be used
       to wait for the coprocess to terminate.

       The return status of a coprocess is the exit status of command.

   Shell Function Definitions
       A shell function is an object that is called like a simple command  and
       executes  a  compound  command with a new set of positional parameters.
       Shell functions are declared as follows:

       [ function ] name () compound-command [redirection]
	      This defines a function named name.  The reserved word  function
	      is  optional.   If  the  function reserved word is supplied, the
	      parentheses are optional.  The body of the function is the  com‐
	      pound  command  compound-command	(see Compound Commands above).
	      That command is usually a list of commands between { and },  but
	      may  be  any command listed under Compound Commands above.  com‐
	      pound-command is executed whenever name is specified as the name
	      of  a  simple command.  Any redirections (see REDIRECTION below)
	      specified when a function is  defined  are  performed  when  the
	      function	is executed.  The exit status of a function definition
	      is zero unless a syntax error occurs or a readonly function with
	      the same name already exists.  When executed, the exit status of
	      a function is the exit status of the last  command  executed  in
	      the body.  (See FUNCTIONS below.)

COMMENTS
       In a non-interactive shell, or an interactive shell in which the inter‐
       active_comments option to the  shopt  builtin  is  enabled  (see  SHELL
       BUILTIN	COMMANDS  below), a word beginning with # causes that word and
       all remaining characters on that line to be  ignored.   An  interactive
       shell  without  the  interactive_comments option enabled does not allow
       comments.  The interactive_comments option is on by default in interac‐
       tive shells.

QUOTING
       Quoting	is used to remove the special meaning of certain characters or
       words to the shell.  Quoting can be used to disable  special  treatment
       for special characters, to prevent reserved words from being recognized
       as such, and to prevent parameter expansion.

       Each of the metacharacters listed above under DEFINITIONS  has  special
       meaning to the shell and must be quoted if it is to represent itself.

       When  the command history expansion facilities are being used (see HIS‐
       TORY EXPANSION below), the history expansion character, usually !, must
       be quoted to prevent history expansion.

       There  are  three  quoting  mechanisms:	the  escape  character, single
       quotes, and double quotes.

       A non-quoted backslash (\) is the escape character.  It	preserves  the
       literal value of the next character that follows, with the exception of
       <newline>.  If a \<newline> pair appears,  and  the  backslash  is  not
       itself  quoted,	the \<newline> is treated as a line continuation (that
       is, it is removed from the input stream and effectively ignored).

       Enclosing characters in single quotes preserves the  literal  value  of
       each character within the quotes.  A single quote may not occur between
       single quotes, even when preceded by a backslash.

       Enclosing characters in double quotes preserves the  literal  value  of
       all  characters	within the quotes, with the exception of $, `, \, and,
       when history expansion is enabled, !.  The characters $	and  `	retain
       their  special meaning within double quotes.  The backslash retains its
       special meaning only when followed by one of the following  characters:
       $,  `,  ", \, or <newline>.  A double quote may be quoted within double
       quotes by preceding it with a backslash.  If enabled, history expansion
       will  be  performed  unless an !  appearing in double quotes is escaped
       using a backslash.  The backslash preceding the !  is not removed.

       The special parameters * and @ have  special  meaning  when  in	double
       quotes (see PARAMETERS below).

       Words of the form $'string' are treated specially.  The word expands to
       string, with backslash-escaped characters replaced as specified by  the
       ANSI  C	standard.  Backslash escape sequences, if present, are decoded
       as follows:
	      \a     alert (bell)
	      \b     backspace
	      \e
	      \E     an escape character
	      \f     form feed
	      \n     new line
	      \r     carriage return
	      \t     horizontal tab
	      \v     vertical tab
	      \\     backslash
	      \'     single quote
	      \"     double quote
	      \nnn   the eight-bit character whose value is  the  octal  value
		     nnn (one to three digits)
	      \xHH   the  eight-bit  character	whose value is the hexadecimal
		     value HH (one or two hex digits)
	      \cx    a control-x character

       The expanded result is single-quoted, as if the	dollar	sign  had  not
       been present.

       A double-quoted string preceded by a dollar sign ($"string") will cause
       the string to be translated according to the current  locale.   If  the
       current	locale	is  C  or  POSIX,  the dollar sign is ignored.	If the
       string is translated and replaced, the replacement is double-quoted.

PARAMETERS
       A parameter is an entity that stores values.  It can be a name, a  num‐
       ber, or one of the special characters listed below under Special Param‐
       eters.  A variable is a parameter denoted by a name.  A variable has  a
       value  and  zero or more attributes.  Attributes are assigned using the
       declare builtin command (see declare below in SHELL BUILTIN COMMANDS).

       A parameter is set if it has been assigned a value.  The null string is
       a  valid  value.  Once a variable is set, it may be unset only by using
       the unset builtin command (see SHELL BUILTIN COMMANDS below).

       A variable may be assigned to by a statement of the form

	      name=[value]

       If value is not given, the variable is assigned the null  string.   All
       values  undergo tilde expansion, parameter and variable expansion, com‐
       mand substitution, arithmetic expansion, and quote removal (see	EXPAN‐
       SION below).  If the variable has its integer attribute set, then value
       is evaluated as an arithmetic expression even if the $((...)) expansion
       is  not	used  (see Arithmetic Expansion below).  Word splitting is not
       performed, with the exception of "$@" as explained below under  Special
       Parameters.   Pathname  expansion  is not performed.  Assignment state‐
       ments may also appear as arguments  to  the  alias,  declare,  typeset,
       export, readonly, and local builtin commands.

       In  the context where an assignment statement is assigning a value to a
       shell variable or array index, the += operator can be used to append to
       or add to the variable's previous value.  When += is applied to a vari‐
       able for which the integer attribute has been set, value  is  evaluated
       as  an arithmetic expression and added to the variable's current value,
       which is also evaluated.  When += is applied to an array variable using
       compound  assignment  (see  Arrays  below), the variable's value is not
       unset (as it is when using =), and new values are appended to the array
       beginning  at  one  greater than the array's maximum index (for indexed
       arrays) or added as additional key-value pairs in an associative array.
       When  applied  to  a  string-valued  variable,  value  is  expanded and
       appended to the variable's value.

   Positional Parameters
       A positional parameter is a parameter denoted by one  or  more  digits,
       other than the single digit 0.  Positional parameters are assigned from
       the shell's arguments when it is invoked, and may be  reassigned  using
       the  set builtin command.  Positional parameters may not be assigned to
       with assignment statements.  The positional parameters are  temporarily
       replaced when a shell function is executed (see FUNCTIONS below).

       When  a	positional parameter consisting of more than a single digit is
       expanded, it must be enclosed in braces (see EXPANSION below).

   Special Parameters
       The shell treats several parameters specially.	These  parameters  may
       only be referenced; assignment to them is not allowed.
       *      Expands  to  the positional parameters, starting from one.  When
	      the expansion occurs within double quotes, it expands to a  sin‐
	      gle word with the value of each parameter separated by the first
	      character of the IFS special variable.  That is, "$*" is equiva‐
	      lent to "$1c$2c...", where c is the first character of the value
	      of the IFS variable.  If IFS is unset, the parameters are  sepa‐
	      rated  by  spaces.   If  IFS  is null, the parameters are joined
	      without intervening separators.
       @      Expands to the positional parameters, starting from  one.   When
	      the  expansion  occurs  within  double  quotes,  each  parameter
	      expands to a separate word.  That is, "$@" is equivalent to "$1"
	      "$2"  ...   If the double-quoted expansion occurs within a word,
	      the expansion of the first parameter is joined with  the	begin‐
	      ning  part  of  the original word, and the expansion of the last
	      parameter is joined with the last part  of  the  original  word.
	      When  there  are no positional parameters, "$@" and $@ expand to
	      nothing (i.e., they are removed).
       #      Expands to the number of positional parameters in decimal.
       ?      Expands to the exit status of the most recently  executed  fore‐
	      ground pipeline.
       -      Expands  to  the	current option flags as specified upon invoca‐
	      tion, by the set builtin command, or  those  set	by  the  shell
	      itself (such as the -i option).
       $      Expands  to  the	process ID of the shell.  In a () subshell, it
	      expands to the process ID of the current	shell,	not  the  sub‐
	      shell.
       !      Expands  to  the	process ID of the most recently executed back‐
	      ground (asynchronous) command.
       0      Expands to the name of the shell or shell script.  This  is  set
	      at shell initialization.	If bash is invoked with a file of com‐
	      mands, $0 is set to the name of that file.  If bash  is  started
	      with  the  -c option, then $0 is set to the first argument after
	      the string to be executed, if one is present.  Otherwise, it  is
	      set  to  the file name used to invoke bash, as given by argument
	      zero.
       _      At shell startup, set to the absolute pathname  used  to	invoke
	      the  shell or shell script being executed as passed in the envi‐
	      ronment or argument list.  Subsequently,	expands  to  the  last
	      argument	to the previous command, after expansion.  Also set to
	      the full pathname used  to  invoke  each	command  executed  and
	      placed in the environment exported to that command.  When check‐
	      ing mail, this parameter holds the name of the  mail  file  cur‐
	      rently being checked.

   Shell Variables
       The following variables are set by the shell:

       BASH   Expands  to  the	full file name used to invoke this instance of
	      bash.
       BASHOPTS
	      A colon-separated list of enabled shell options.	Each  word  in
	      the  list  is  a	valid  argument for the -s option to the shopt
	      builtin command (see SHELL BUILTIN COMMANDS below).  The options
	      appearing  in  BASHOPTS  are  those reported as on by shopt.  If
	      this variable is in the environment when bash  starts  up,  each
	      shell  option  in  the  list  will be enabled before reading any
	      startup files.  This variable is read-only.
       BASHPID
	      Expands to the process id of the	current  bash  process.   This
	      differs  from  $$ under certain circumstances, such as subshells
	      that do not require bash to be re-initialized.
       BASH_ALIASES
	      An associative array variable whose members  correspond  to  the
	      internal list of aliases as maintained by the alias builtin Ele‐
	      ments added to this array appear in the  alias  list;  unsetting
	      array elements cause aliases to be removed from the alias list.
       BASH_ARGC
	      An  array  variable whose values are the number of parameters in
	      each frame of the current bash execution call stack.  The number
	      of  parameters  to  the  current	subroutine  (shell function or
	      script executed with . or source) is at the top  of  the	stack.
	      When  a  subroutine is executed, the number of parameters passed
	      is pushed onto BASH_ARGC.  The shell sets BASH_ARGC only when in
	      extended	debugging  mode  (see  the description of the extdebug
	      option to the shopt builtin below)
       BASH_ARGV
	      An array variable containing all of the parameters in  the  cur‐
	      rent bash execution call stack.  The final parameter of the last
	      subroutine call is at the top of the stack; the first  parameter
	      of the initial call is at the bottom.  When a subroutine is exe‐
	      cuted, the parameters supplied are pushed onto  BASH_ARGV.   The
	      shell  sets  BASH_ARGV only when in extended debugging mode (see
	      the description of the extdebug  option  to  the	shopt  builtin
	      below)
       BASH_CMDS
	      An  associative  array  variable whose members correspond to the
	      internal hash table  of  commands  as  maintained  by  the  hash
	      builtin.	Elements added to this array appear in the hash table;
	      unsetting array elements cause commands to be removed  from  the
	      hash table.
       BASH_COMMAND
	      The  command  currently  being executed or about to be executed,
	      unless the shell is executing a command as the result of a trap,
	      in  which  case  it  is the command executing at the time of the
	      trap.
       BASH_EXECUTION_STRING
	      The command argument to the -c invocation option.
       BASH_LINENO
	      An array variable whose members are the line numbers  in	source
	      files    corresponding	to    each    member	of   FUNCNAME.
	      ${BASH_LINENO[$i]} is the line number in the source  file  where
	      ${FUNCNAME[$i]}  was  called  (or ${BASH_LINENO[$i-1]} if refer‐
	      enced within another shell function).  The corresponding	source
	      file  name is ${BASH_SOURCE[$i]}.  Use LINENO to obtain the cur‐
	      rent line number.
       BASH_REMATCH
	      An array variable whose members are assigned by  the  =~	binary
	      operator	to the [[ conditional command.	The element with index
	      0 is the portion of  the	string	matching  the  entire  regular
	      expression.   The  element  with	index  n is the portion of the
	      string matching the nth parenthesized subexpression.  This vari‐
	      able is read-only.
       BASH_SOURCE
	      An  array variable whose members are the source filenames corre‐
	      sponding to the elements in the FUNCNAME array variable.
       BASH_SUBSHELL
	      Incremented by one each time a subshell or subshell  environment
	      is spawned.  The initial value is 0.
       BASH_VERSINFO
	      A readonly array variable whose members hold version information
	      for this instance of bash.  The values  assigned	to  the  array
	      members are as follows:
	      BASH_VERSINFO[0]	      The major version number (the release).
	      BASH_VERSINFO[1]	      The minor version number (the version).
	      BASH_VERSINFO[2]	      The patch level.
	      BASH_VERSINFO[3]	      The build version.
	      BASH_VERSINFO[4]	      The release status (e.g., beta1).
	      BASH_VERSINFO[5]	      The value of MACHTYPE.

       BASH_VERSION
	      Expands  to  a string describing the version of this instance of
	      bash.

       COMP_CWORD
	      An index into ${COMP_WORDS} of the word containing  the  current
	      cursor position.	This variable is available only in shell func‐
	      tions invoked by the  programmable  completion  facilities  (see
	      Programmable Completion below).

       COMP_KEY
	      The key (or final key of a key sequence) used to invoke the cur‐
	      rent completion function.

       COMP_LINE
	      The current command line.  This variable is  available  only  in
	      shell  functions	and  external commands invoked by the program‐
	      mable completion facilities (see Programmable Completion below).

       COMP_POINT
	      The index of the current cursor position relative to the	begin‐
	      ning  of the current command.  If the current cursor position is
	      at the end of the current command, the value of this variable is
	      equal  to  ${#COMP_LINE}.   This	variable  is available only in
	      shell functions and external commands invoked  by  the  program‐
	      mable completion facilities (see Programmable Completion below).

       COMP_TYPE
	      Set  to an integer value corresponding to the type of completion
	      attempted that caused a completion function to be  called:  TAB,
	      for  normal completion, ?, for listing completions after succes‐
	      sive tabs, !, for listing alternatives on partial  word  comple‐
	      tion,  @,  to list completions if the word is not unmodified, or
	      %, for menu completion.  This  variable  is  available  only  in
	      shell  functions	and  external commands invoked by the program‐
	      mable completion facilities (see Programmable Completion below).

       COMP_WORDBREAKS
	      The set of characters that the readline library treats  as  word
	      separators  when performing word completion.  If COMP_WORDBREAKS
	      is unset, it loses its special properties, even if it is	subse‐
	      quently reset.

       COMP_WORDS
	      An  array variable (see Arrays below) consisting of the individ‐
	      ual words in the current command line.  The line is  split  into
	      words  as  readline  would  split  it,  using COMP_WORDBREAKS as
	      described above.	This variable is available only in shell func‐
	      tions  invoked  by  the  programmable completion facilities (see
	      Programmable Completion below).

       DIRSTACK
	      An array variable (see Arrays below) containing the current con‐
	      tents  of  the directory stack.  Directories appear in the stack
	      in the order they are displayed by the dirs builtin.   Assigning
	      to members of this array variable may be used to modify directo‐
	      ries already in the stack, but the pushd and popd builtins  must
	      be used to add and remove directories.  Assignment to this vari‐
	      able will not change the	current  directory.   If  DIRSTACK  is
	      unset,  it  loses  its  special properties, even if it is subse‐
	      quently reset.

       EUID   Expands to the effective user ID of the current  user,  initial‐
	      ized at shell startup.  This variable is readonly.

       FUNCNAME
	      An  array  variable  containing the names of all shell functions
	      currently in the execution call stack.  The element with index 0
	      is the name of any currently-executing shell function.  The bot‐
	      tom-most element is "main".  This variable exists  only  when  a
	      shell  function  is  executing.  Assignments to FUNCNAME have no
	      effect and return an error status.  If  FUNCNAME	is  unset,  it
	      loses its special properties, even if it is subsequently reset.

       GROUPS An  array  variable  containing  the list of groups of which the
	      current user is a member.  Assignments to GROUPS have no	effect
	      and  return  an  error status.  If GROUPS is unset, it loses its
	      special properties, even if it is subsequently reset.

       HISTCMD
	      The history number, or index in the history list, of the current
	      command.	 If HISTCMD is unset, it loses its special properties,
	      even if it is subsequently reset.

       HOSTNAME
	      Automatically set to the name of the current host.

       HOSTTYPE
	      Automatically set to a string that uniquely describes  the  type
	      of  machine  on which bash is executing.	The default is system-
	      dependent.

       LINENO Each time this parameter is referenced, the shell substitutes  a
	      decimal  number  representing the current sequential line number
	      (starting with 1) within a script or function.  When  not  in  a
	      script  or  function, the value substituted is not guaranteed to
	      be meaningful.  If LINENO is unset, it loses its special proper‐
	      ties, even if it is subsequently reset.

       MACHTYPE
	      Automatically  set  to  a string that fully describes the system
	      type on which bash is executing, in the  standard  GNU  cpu-com‐
	      pany-system format.  The default is system-dependent.

       OLDPWD The previous working directory as set by the cd command.

       OPTARG The  value  of the last option argument processed by the getopts
	      builtin command (see SHELL BUILTIN COMMANDS below).

       OPTIND The index of the next argument to be processed  by  the  getopts
	      builtin command (see SHELL BUILTIN COMMANDS below).

       OSTYPE Automatically  set to a string that describes the operating sys‐
	      tem on which bash is executing.  The  default  is  system-depen‐
	      dent.

       PIPESTATUS
	      An  array  variable (see Arrays below) containing a list of exit
	      status values from the processes in  the	most-recently-executed
	      foreground pipeline (which may contain only a single command).

       PPID   The  process  ID	of the shell's parent.	This variable is read‐
	      only.

       PWD    The current working directory as set by the cd command.

       RANDOM Each time this parameter is referenced, a random integer between
	      0 and 32767 is generated.  The sequence of random numbers may be
	      initialized by assigning a value to RANDOM.  If RANDOM is unset,
	      it  loses  its  special  properties,  even if it is subsequently
	      reset.

       REPLY  Set to the line of input read by the read builtin  command  when
	      no arguments are supplied.

       SECONDS
	      Each  time  this	parameter is referenced, the number of seconds
	      since shell invocation is returned.  If a value is  assigned  to
	      SECONDS,	the  value  returned upon subsequent references is the
	      number of seconds since the assignment plus the value  assigned.
	      If SECONDS is unset, it loses its special properties, even if it
	      is subsequently reset.

       SHELLOPTS
	      A colon-separated list of enabled shell options.	Each  word  in
	      the  list  is  a	valid  argument  for  the -o option to the set
	      builtin command (see SHELL BUILTIN COMMANDS below).  The options
	      appearing  in  SHELLOPTS are those reported as on by set -o.  If
	      this variable is in the environment when bash  starts  up,  each
	      shell  option  in  the  list  will be enabled before reading any
	      startup files.  This variable is read-only.

       SHLVL  Incremented by one each time an instance of bash is started.

       UID    Expands to the user ID of the current user, initialized at shell
	      startup.	This variable is readonly.

       The  following  variables  are  used by the shell.  In some cases, bash
       assigns a default value to a variable; these cases are noted below.

       BASH_ENV
	      If this parameter is set when bash is executing a shell  script,
	      its  value  is  interpreted as a filename containing commands to
	      initialize the shell, as in ~/.bashrc.  The value of BASH_ENV is
	      subjected  to  parameter	expansion,  command  substitution, and
	      arithmetic expansion before being interpreted as	a  file  name.
	      PATH is not used to search for the resultant file name.
       CDPATH The  search  path for the cd command.  This is a colon-separated
	      list of directories in which the	shell  looks  for  destination
	      directories  specified  by  the  cd  command.  A sample value is
	      ".:~:/usr".
       BASH_XTRACEFD
	      If set to an integer corresponding to a valid  file  descriptor,
	      bash  will  write  the  trace  output  generated	when set -x is
	      enabled to that file descriptor.	The file descriptor is	closed
	      when  BASH_XTRACEFD is unset or assigned a new value.  Unsetting
	      BASH_XTRACEFD or assigning it the empty string causes the  trace
	      output  to  be  sent  to	the standard error.  Note that setting
	      BASH_XTRACEFD to 2 (the standard error file descriptor) and then
	      unsetting it will result in the standard error being closed.
       COLUMNS
	      Used  by	the  select  builtin command to determine the terminal
	      width when printing selection  lists.   Automatically  set  upon
	      receipt of a SIGWINCH.
       COMPREPLY
	      An array variable from which bash reads the possible completions
	      generated by a shell function invoked by the  programmable  com‐
	      pletion facility (see Programmable Completion below).
       EMACS  If  bash	finds  this variable in the environment when the shell
	      starts with value "t", it assumes that the shell is  running  in
	      an emacs shell buffer and disables line editing.
       FCEDIT The default editor for the fc builtin command.
       FIGNORE
	      A  colon-separated  list	of  suffixes to ignore when performing
	      filename completion (see READLINE below).  A filename whose suf‐
	      fix  matches  one of the entries in FIGNORE is excluded from the
	      list of matched filenames.  A sample value is ".o:~" (Quoting is
	      needed  when  assigning a value to this variable, which contains
	      tildes).
       GLOBIGNORE
	      A colon-separated list of patterns defining the set of filenames
	      to be ignored by pathname expansion.  If a filename matched by a
	      pathname expansion pattern also matches one of the  patterns  in
	      GLOBIGNORE, it is removed from the list of matches.
       HISTCONTROL
	      A  colon-separated  list	of values controlling how commands are
	      saved on the history list.   If  the  list  of  values  includes
	      ignorespace,  lines  which  begin with a space character are not
	      saved in the history list.  A value of ignoredups  causes  lines
	      matching the previous history entry to not be saved.  A value of
	      ignoreboth is shorthand for ignorespace and ignoredups.  A value
	      of erasedups causes all previous lines matching the current line
	      to be removed from the history list before that line  is	saved.
	      Any  value  not in the above list is ignored.  If HISTCONTROL is
	      unset, or does not include a valid value, all lines read by  the
	      shell parser are saved on the history list, subject to the value
	      of HISTIGNORE.  The second and subsequent lines of a  multi-line
	      compound	command  are  not tested, and are added to the history
	      regardless of the value of HISTCONTROL.
       HISTFILE
	      The name of the file in which command history is saved (see HIS‐
	      TORY  below).   The default value is ~/.bash_history.  If unset,
	      the command history is  not  saved  when	an  interactive  shell
	      exits.
       HISTFILESIZE
	      The maximum number of lines contained in the history file.  When
	      this variable is assigned a value, the  history  file  is  trun‐
	      cated,  if necessary, by removing the oldest entries, to contain
	      no more than that number of lines.  The default  value  is  500.
	      The history file is also truncated to this size after writing it
	      when an interactive shell exits.
       HISTIGNORE
	      A colon-separated list of patterns used to decide which  command
	      lines  should  be  saved	on  the history list.  Each pattern is
	      anchored at the beginning of the line and must  match  the  com‐
	      plete  line  (no	implicit  `*'  is  appended).  Each pattern is
	      tested against the line after the checks specified  by  HISTCON‐
	      TROL  are  applied.   In	addition  to  the normal shell pattern
	      matching characters, `&' matches the previous history line.  `&'
	      may  be  escaped	using  a  backslash;  the backslash is removed
	      before attempting a match.  The second and subsequent lines of a
	      multi-line compound command are not tested, and are added to the
	      history regardless of the value of HISTIGNORE.
       HISTSIZE
	      The number of commands to remember in the command  history  (see
	      HISTORY below).  The default value is 500.
       HISTTIMEFORMAT
	      If  this	variable  is  set and not null, its value is used as a
	      format string for strftime(3) to print the time stamp associated
	      with  each  history  entry displayed by the history builtin.  If
	      this variable is set, time stamps are  written  to  the  history
	      file  so they may be preserved across shell sessions.  This uses
	      the history comment character  to  distinguish  timestamps  from
	      other history lines.
       HOME   The home directory of the current user; the default argument for
	      the cd builtin command.  The value of this variable is also used
	      when performing tilde expansion.
       HOSTFILE
	      Contains	the  name  of  a file in the same format as /etc/hosts
	      that should be read when the shell needs to complete a hostname.
	      The  list  of possible hostname completions may be changed while
	      the shell is running;  the  next	time  hostname	completion  is
	      attempted  after the value is changed, bash adds the contents of
	      the new file to the existing list.  If HOSTFILE is set, but  has
	      no  value,  or  does  not name a readable file, bash attempts to
	      read /etc/hosts to obtain the list of possible hostname  comple‐
	      tions.  When HOSTFILE is unset, the hostname list is cleared.
       IFS    The  Internal  Field  Separator  that is used for word splitting
	      after expansion and to split lines  into	words  with  the  read
	      builtin  command.   The  default	value  is  ``<space><tab><new‐
	      line>''.
       IGNOREEOF
	      Controls the action of an interactive shell on receipt of an EOF
	      character as the sole input.  If set, the value is the number of
	      consecutive EOF characters which must  be  typed	as  the  first
	      characters  on an input line before bash exits.  If the variable
	      exists but does not have a numeric value, or has no  value,  the
	      default  value  is  10.  If it does not exist, EOF signifies the
	      end of input to the shell.
       INPUTRC
	      The filename for	the  readline  startup	file,  overriding  the
	      default of ~/.inputrc (see READLINE below).
       LANG   Used  to	determine  the	locale	category  for any category not
	      specifically selected with a variable starting with LC_.
       LC_ALL This variable overrides the value of  LANG  and  any  other  LC_
	      variable specifying a locale category.
       LC_COLLATE
	      This  variable  determines the collation order used when sorting
	      the results of pathname expansion, and determines  the  behavior
	      of   range   expressions,  equivalence  classes,	and  collating
	      sequences within pathname expansion and pattern matching.
       LC_CTYPE
	      This variable determines the interpretation  of  characters  and
	      the  behavior of character classes within pathname expansion and
	      pattern matching.
       LC_MESSAGES
	      This variable determines the locale used	to  translate  double-
	      quoted strings preceded by a $.
       LC_NUMERIC
	      This  variable  determines  the  locale category used for number
	      formatting.
       LINES  Used by the select  builtin  command  to	determine  the	column
	      length  for  printing  selection	lists.	Automatically set upon
	      receipt of a SIGWINCH.
       MAIL   If this parameter is set to a file name and the  MAILPATH  vari‐
	      able is not set, bash informs the user of the arrival of mail in
	      the specified file.
       MAILCHECK
	      Specifies how often (in seconds)	bash  checks  for  mail.   The
	      default  is  60 seconds.	When it is time to check for mail, the
	      shell does so before displaying the  primary  prompt.   If  this
	      variable	is  unset,  or	set  to  a  value that is not a number
	      greater than or equal to zero, the shell disables mail checking.
       MAILPATH
	      A colon-separated list of file names to  be  checked  for  mail.
	      The message to be printed when mail arrives in a particular file
	      may be specified by separating the file name  from  the  message
	      with a `?'.  When used in the text of the message, $_ expands to
	      the name of the current mailfile.  Example:
	      MAILPATH='/var/mail/bfox?"You  have  mail":~/shell-mail?"$_  has
	      mail!"'
	      Bash  supplies  a default value for this variable, but the loca‐
	      tion of the user mail files that it  uses  is  system  dependent
	      (e.g., /var/mail/$USER).
       OPTERR If set to the value 1, bash displays error messages generated by
	      the getopts builtin command (see SHELL BUILTIN COMMANDS  below).
	      OPTERR  is  initialized to 1 each time the shell is invoked or a
	      shell script is executed.
       PATH   The search path for commands.  It is a colon-separated  list  of
	      directories  in  which the shell looks for commands (see COMMAND
	      EXECUTION below).  A zero-length (null) directory  name  in  the
	      value of PATH indicates the current directory.  A null directory
	      name may appear as two adjacent colons,  or  as  an  initial  or
	      trailing	colon.	 The  default path is system-dependent, and is
	      set by the administrator who installs bash.  A common  value  is
	      ``/usr/gnu/bin:/usr/local/bin:/usr/ucb:/bin:/usr/bin''.
       POSIXLY_CORRECT
	      If  this	variable  is  in the environment when bash starts, the
	      shell enters posix mode before reading the startup files, as  if
	      the  --posix  invocation option had been supplied.  If it is set
	      while the shell is running, bash enables posix mode, as  if  the
	      command set -o posix had been executed.
       PROMPT_COMMAND
	      If set, the value is executed as a command prior to issuing each
	      primary prompt.
       PROMPT_DIRTRIM
	      If set to a number greater than zero, the value is used  as  the
	      number of trailing directory components to retain when expanding
	      the \w and \W  prompt  string  escapes  (see  PROMPTING  below).
	      Characters removed are replaced with an ellipsis.
       PS1    The  value  of  this parameter is expanded (see PROMPTING below)
	      and used as the primary prompt string.   The  default  value  is
	      ``\s-\v\$ ''.
       PS2    The  value of this parameter is expanded as with PS1 and used as
	      the secondary prompt string.  The default is ``> ''.
       PS3    The value of this parameter is used as the prompt for the select
	      command (see SHELL GRAMMAR above).
       PS4    The  value  of  this  parameter  is expanded as with PS1 and the
	      value is printed before each command  bash  displays  during  an
	      execution  trace.  The first character of PS4 is replicated mul‐
	      tiple times, as necessary, to indicate multiple levels of  indi‐
	      rection.	The default is ``+ ''.
       SHELL  The full pathname to the shell is kept in this environment vari‐
	      able.  If it is not set when the shell starts, bash  assigns  to
	      it the full pathname of the current user's login shell.
       TIMEFORMAT
	      The  value of this parameter is used as a format string specify‐
	      ing how the timing information for pipelines prefixed  with  the
	      time  reserved word should be displayed.	The % character intro‐
	      duces an escape sequence that is expanded to  a  time  value  or
	      other  information.  The escape sequences and their meanings are
	      as follows; the braces denote optional portions.
	      %%	A literal %.
	      %[p][l]R	The elapsed time in seconds.
	      %[p][l]U	The number of CPU seconds spent in user mode.
	      %[p][l]S	The number of CPU seconds spent in system mode.
	      %P	The CPU percentage, computed as (%U + %S) / %R.

	      The optional p is a digit specifying the precision,  the	number
	      of fractional digits after a decimal point.  A value of 0 causes
	      no decimal point or fraction to be output.  At most three places
	      after  the  decimal  point may be specified; values of p greater
	      than 3 are changed to 3.	If p is not specified, the value 3  is
	      used.

	      The  optional l specifies a longer format, including minutes, of
	      the form MMmSS.FFs.  The value of p determines  whether  or  not
	      the fraction is included.

	      If  this	variable  is not set, bash acts as if it had the value
	      $'\nreal\t%3lR\nuser\t%3lU\nsys%3lS'.  If the value is null,  no
	      timing  information  is  displayed.  A trailing newline is added
	      when the format string is displayed.

       TMOUT  If set to a value greater than zero, TMOUT  is  treated  as  the
	      default timeout for the read builtin.  The select command termi‐
	      nates if input does not arrive after TMOUT seconds when input is
	      coming  from  a terminal.  In an interactive shell, the value is
	      interpreted as the number of seconds to  wait  for  input  after
	      issuing  the  primary prompt.  Bash terminates after waiting for
	      that number of seconds if input does not arrive.

       TMPDIR If set, Bash uses its value as the name of a directory in  which
	      Bash creates temporary files for the shell's use.

       auto_resume
	      This variable controls how the shell interacts with the user and
	      job control.  If this variable is set, single word  simple  com‐
	      mands without redirections are treated as candidates for resump‐
	      tion of an existing stopped job.	There is no ambiguity allowed;
	      if  there  is more than one job beginning with the string typed,
	      the job most recently accessed  is  selected.   The  name  of  a
	      stopped  job, in this context, is the command line used to start
	      it.  If set to the value exact, the string supplied  must  match
	      the  name  of  a	stopped  job exactly; if set to substring, the
	      string supplied needs to match a substring  of  the  name  of  a
	      stopped  job.  The substring value provides functionality analo‐
	      gous to the %?  job identifier (see JOB CONTROL below).  If  set
	      to  any  other  value, the supplied string must be a prefix of a
	      stopped job's name; this provides functionality analogous to the
	      %string job identifier.

       histchars
	      The  two or three characters which control history expansion and
	      tokenization (see HISTORY EXPANSION below).  The first character
	      is  the history expansion character, the character which signals
	      the start of a history  expansion,  normally  `!'.   The	second
	      character  is the quick substitution character, which is used as
	      shorthand for re-running the previous command  entered,  substi‐
	      tuting  one  string  for another in the command.	The default is
	      `^'.  The optional third character is the character which  indi‐
	      cates  that the remainder of the line is a comment when found as
	      the first character of a word, normally `#'.  The  history  com‐
	      ment character causes history substitution to be skipped for the
	      remaining words on the line.  It does not necessarily cause  the
	      shell parser to treat the rest of the line as a comment.

   Arrays
       Bash  provides one-dimensional indexed and associative array variables.
       Any variable may be used as an indexed array; the declare builtin  will
       explicitly  declare an array.  There is no maximum limit on the size of
       an array, nor any requirement that members be indexed or assigned  con‐
       tiguously.   Indexed  arrays  are  referenced using integers (including
       arithmetic expressions)	and are  zero-based;  associative  arrays  are
       referenced using arbitrary strings.

       An  indexed  array is created automatically if any variable is assigned
       to using the syntax name[subscript]=value.  The subscript is treated as
       an arithmetic expression that must evaluate to a number greater than or
       equal to zero.  To explicitly declare an indexed array, use declare  -a
       name (see SHELL BUILTIN COMMANDS below).  declare -a name[subscript] is
       also accepted; the subscript is ignored.

       Associative arrays are created using declare -A name.

       Attributes may be specified for an array variable using the declare and
       readonly builtins.  Each attribute applies to all members of an array.

       Arrays	are  assigned  to  using  compound  assignments  of  the  form
       name=(value1 ... valuen),  where  each  value  is  of  the  form  [sub‐
       script]=string.	 Indexed  array assignments do not require the bracket
       and subscript.  When assigning  to  indexed  arrays,  if  the  optional
       brackets  and subscript are supplied, that index is assigned to; other‐
       wise the index of the element assigned is the last index assigned to by
       the statement plus one.	Indexing starts at zero.

       When assigning to an associative array, the subscript is required.

       This  syntax is also accepted by the declare builtin.  Individual array
       elements may be assigned  to  using  the  name[subscript]=value	syntax
       introduced above.

       Any  element  of  an  array may be referenced using ${name[subscript]}.
       The braces are required to avoid conflicts with pathname expansion.  If
       subscript  is  @  or *, the word expands to all members of name.  These
       subscripts differ only when the word appears within double quotes.   If
       the word is double-quoted, ${name[*]} expands to a single word with the
       value of each array member separated by the first character of the  IFS
       special variable, and ${name[@]} expands each element of name to a sep‐
       arate word.  When there are no array  members,  ${name[@]}  expands  to
       nothing.   If  the  double-quoted  expansion  occurs within a word, the
       expansion of the first parameter is joined with the beginning  part  of
       the  original  word,  and the expansion of the last parameter is joined
       with the last part of the original word.   This	is  analogous  to  the
       expansion  of  the  special  parameters * and @ (see Special Parameters
       above).	${#name[subscript]}  expands  to  the  length  of  ${name[sub‐
       script]}.   If subscript is * or @, the expansion is the number of ele‐
       ments in the array.  Referencing an array variable without a  subscript
       is equivalent to referencing the array with a subscript of 0.

       An  array variable is considered set if a subscript has been assigned a
       value.  The null string is a valid value.

       The unset builtin is used to  destroy  arrays.	unset  name[subscript]
       destroys  the  array element at index subscript.  Care must be taken to
       avoid unwanted side effects caused by pathname expansion.  unset  name,
       where  name is an array, or unset name[subscript], where subscript is *
       or @, removes the entire array.

       The declare, local, and readonly builtins each accept a	-a  option  to
       specify	an  indexed  array  and  a -A option to specify an associative
       array.  The read builtin accepts a -a option to assign a list of  words
       read from the standard input to an array.  The set and declare builtins
       display array values in a way that allows them to be reused as  assign‐
       ments.

EXPANSION
       Expansion is performed on the command line after it has been split into
       words.  There are seven kinds of expansion performed: brace  expansion,
       tilde  expansion,  parameter  and variable expansion, command substitu‐
       tion, arithmetic expansion, word splitting, and pathname expansion.

       The order of expansions is: brace expansion, tilde  expansion,  parame‐
       ter,  variable  and arithmetic expansion and command substitution (done
       in a left-to-right fashion), word splitting, and pathname expansion.

       On systems that can support it, there is an additional expansion avail‐
       able: process substitution.

       Only brace expansion, word splitting, and pathname expansion can change
       the number of words of the expansion; other expansions expand a	single
       word  to a single word.	The only exceptions to this are the expansions
       of "$@" and "${name[@]}" as explained above (see PARAMETERS).

   Brace Expansion
       Brace expansion is a mechanism by which arbitrary strings may be gener‐
       ated.   This  mechanism is similar to pathname expansion, but the file‐
       names generated need not exist.	Patterns to be brace expanded take the
       form of an optional preamble, followed by either a series of comma-sep‐
       arated strings or a sequence expression between a pair of braces,  fol‐
       lowed  by  an  optional	postscript.   The preamble is prefixed to each
       string contained within the braces, and the postscript is then appended
       to each resulting string, expanding left to right.

       Brace  expansions  may  be nested.  The results of each expanded string
       are not sorted;	left  to  right  order	is  preserved.	 For  example,
       a{d,c,b}e expands into `ade ace abe'.

       A  sequence expression takes the form {x..y[..incr]}, where x and y are
       either integers or single characters, and incr, an optional  increment,
       is  an  integer.  When integers are supplied, the expression expands to
       each number between x and y, inclusive.	Supplied integers may be  pre‐
       fixed  with 0 to force each term to have the same width.  When either x
       or y begins with a zero, the shell  attempts  to  force	all  generated
       terms  to  contain the same number of digits, zero-padding where neces‐
       sary.  When characters are supplied, the  expression  expands  to  each
       character lexicographically between x and y, inclusive.	Note that both
       x and y must be of the same type.  When the increment is  supplied,  it
       is  used as the difference between each term.  The default increment is
       1 or -1 as appropriate.

       Brace expansion is performed before any other expansions, and any char‐
       acters  special to other expansions are preserved in the result.  It is
       strictly textual.  Bash does not apply any syntactic interpretation  to
       the context of the expansion or the text between the braces.

       A  correctly-formed  brace  expansion must contain unquoted opening and
       closing braces, and at least one unquoted comma	or  a  valid  sequence
       expression.   Any incorrectly formed brace expansion is left unchanged.
       A { or , may be quoted with a backslash to prevent its being considered
       part  of  a brace expression.  To avoid conflicts with parameter expan‐
       sion, the string ${ is not considered eligible for brace expansion.

       This construct is typically used as shorthand when the common prefix of
       the strings to be generated is longer than in the above example:

	      mkdir /usr/local/src/bash/{old,new,dist,bugs}
       or
	      chown root /usr/{ucb/{ex,edit},lib/{ex?.?*,how_ex}}

       Brace  expansion  introduces  a	slight incompatibility with historical
       versions of sh.	sh does not treat opening or closing braces  specially
       when  they  appear as part of a word, and preserves them in the output.
       Bash removes braces from words as a  consequence  of  brace  expansion.
       For  example,  a word entered to sh as file{1,2} appears identically in
       the output.  The same word is output as file1 file2 after expansion  by
       bash.   If strict compatibility with sh is desired, start bash with the
       +B option or disable brace expansion with the +B option to the set com‐
       mand (see SHELL BUILTIN COMMANDS below).

   Tilde Expansion
       If  a  word  begins  with an unquoted tilde character (`~'), all of the
       characters preceding the first unquoted slash (or  all  characters,  if
       there  is no unquoted slash) are considered a tilde-prefix.  If none of
       the characters in the tilde-prefix are quoted, the  characters  in  the
       tilde-prefix  following the tilde are treated as a possible login name.
       If this login name is the null string, the tilde is replaced  with  the
       value  of  the shell parameter HOME.  If HOME is unset, the home direc‐
       tory of the user executing the shell is	substituted  instead.	Other‐
       wise,  the  tilde-prefix is replaced with the home directory associated
       with the specified login name.

       If the tilde-prefix is a `~+', the value  of  the  shell  variable  PWD
       replaces the tilde-prefix.  If the tilde-prefix is a `~-', the value of
       the shell variable OLDPWD, if it is set, is substituted.  If the  char‐
       acters  following  the tilde in the tilde-prefix consist of a number N,
       optionally prefixed by a `+' or a `-',  the  tilde-prefix  is  replaced
       with the corresponding element from the directory stack, as it would be
       displayed by the dirs builtin invoked with the tilde-prefix as an argu‐
       ment.   If  the characters following the tilde in the tilde-prefix con‐
       sist of a number without a leading `+' or `-', `+' is assumed.

       If the login name is invalid, or the tilde expansion fails, the word is
       unchanged.

       Each variable assignment is checked for unquoted tilde-prefixes immedi‐
       ately following a : or the first =.  In these cases, tilde expansion is
       also  performed.   Consequently,  one may use file names with tildes in
       assignments to PATH, MAILPATH, and CDPATH, and the  shell  assigns  the
       expanded value.

   Parameter Expansion
       The `$' character introduces parameter expansion, command substitution,
       or arithmetic expansion.  The parameter name or symbol to  be  expanded
       may  be enclosed in braces, which are optional but serve to protect the
       variable to be expanded from characters immediately following it  which
       could be interpreted as part of the name.

       When  braces  are  used, the matching ending brace is the first `}' not
       escaped by a backslash or within a quoted string,  and  not  within  an
       embedded  arithmetic  expansion,  command  substitution,  or  parameter
       expansion.

       ${parameter}
	      The value of parameter is substituted.  The braces are  required
	      when  parameter  is  a  positional  parameter with more than one
	      digit, or when parameter is followed by a character which is not
	      to be interpreted as part of its name.

       If  the	first  character  of  parameter is an exclamation point (!), a
       level of variable indirection is introduced.  Bash uses	the  value  of
       the variable formed from the rest of parameter as the name of the vari‐
       able; this variable is then expanded and that value is used in the rest
       of  the	substitution, rather than the value of parameter itself.  This
       is known as indirect expansion.	The exceptions to this are the	expan‐
       sions  of ${!prefix*} and ${!name[@]} described below.  The exclamation
       point must immediately follow the left  brace  in  order  to  introduce
       indirection.

       In each of the cases below, word is subject to tilde expansion, parame‐
       ter expansion, command substitution, and arithmetic expansion.

       When not performing substring expansion,  using	the  forms  documented
       below,  bash tests for a parameter that is unset or null.  Omitting the
       colon results in a test only for a parameter that is unset.

       ${parameter:-word}
	      Use Default Values.  If parameter is unset or null,  the	expan‐
	      sion  of word is substituted.  Otherwise, the value of parameter
	      is substituted.
       ${parameter:=word}
	      Assign Default Values.  If  parameter  is  unset	or  null,  the
	      expansion of word is assigned to parameter.  The value of param‐
	      eter is then substituted.   Positional  parameters  and  special
	      parameters may not be assigned to in this way.
       ${parameter:?word}
	      Display  Error if Null or Unset.	If parameter is null or unset,
	      the expansion of word (or a message to that effect  if  word  is
	      not  present) is written to the standard error and the shell, if
	      it is not interactive, exits.  Otherwise, the value of parameter
	      is substituted.
       ${parameter:+word}
	      Use  Alternate Value.  If parameter is null or unset, nothing is
	      substituted, otherwise the expansion of word is substituted.
       ${parameter:offset}
       ${parameter:offset:length}
	      Substring Expansion.  Expands to	up  to	length	characters  of
	      parameter  starting  at  the  character specified by offset.  If
	      length is omitted, expands to the substring of parameter	start‐
	      ing at the character specified by offset.  length and offset are
	      arithmetic  expressions  (see  ARITHMETIC   EVALUATION   below).
	      length  must evaluate to a number greater than or equal to zero.
	      If offset evaluates to a number less than  zero,	the  value  is
	      used  as	an  offset  from  the  end  of the value of parameter.
	      Arithmetic expressions starting with a - must  be  separated  by
	      whitespace from the preceding : to be distinguished from the Use
	      Default Values expansion.  If parameter  is  @,  the  result  is
	      length  positional parameters beginning at offset.  If parameter
	      is an indexed array name subscripted by @ or *,  the  result  is
	      the  length members of the array beginning with ${parameter[off‐
	      set]}.  A negative offset is taken relative to one greater  than
	      the  maximum  index of the specified array.  Substring expansion
	      applied to an  associative  array  produces  undefined  results.
	      Note  that a negative offset must be separated from the colon by
	      at least one space to avoid being confused with  the  :-	expan‐
	      sion.   Substring  indexing  is zero-based unless the positional
	      parameters are used, in which case the indexing starts at  1  by
	      default.	 If  offset  is  0,  and the positional parameters are
	      used, $0 is prefixed to the list.

       ${!prefix*}
       ${!prefix@}
	      Names matching prefix.  Expands to the names of variables  whose
	      names begin with prefix, separated by the first character of the
	      IFS special variable.  When @ is used and the expansion  appears
	      within  double  quotes, each variable name expands to a separate
	      word.

       ${!name[@]}
       ${!name[*]}
	      List of array keys.  If name is an array	variable,  expands  to
	      the  list  of array indices (keys) assigned in name.  If name is
	      not an array, expands to 0 if name is set  and  null  otherwise.
	      When  @  is used and the expansion appears within double quotes,
	      each key expands to a separate word.

       ${#parameter}
	      Parameter length.  The length in	characters  of	the  value  of
	      parameter  is  substituted.   If	parameter is * or @, the value
	      substituted is the number of positional parameters.  If  parame‐
	      ter  is  an  array name subscripted by * or @, the value substi‐
	      tuted is the number of elements in the array.

       ${parameter#word}
       ${parameter##word}
	      Remove matching prefix pattern.  The word is expanded to produce
	      a pattern just as in pathname expansion.	If the pattern matches
	      the beginning of the value of parameter, then the result of  the
	      expansion  is  the expanded value of parameter with the shortest
	      matching pattern (the ``#'' case) or the longest	matching  pat‐
	      tern  (the  ``##''  case)  deleted.  If parameter is @ or *, the
	      pattern removal operation is applied to each positional  parame‐
	      ter in turn, and the expansion is the resultant list.  If param‐
	      eter is an array variable subscripted with @ or *,  the  pattern
	      removal  operation  is  applied  to  each member of the array in
	      turn, and the expansion is the resultant list.

       ${parameter%word}
       ${parameter%%word}
	      Remove matching suffix pattern.  The word is expanded to produce
	      a pattern just as in pathname expansion.	If the pattern matches
	      a trailing portion of the expanded value of parameter, then  the
	      result  of the expansion is the expanded value of parameter with
	      the shortest matching pattern (the ``%'' case)  or  the  longest
	      matching	pattern  (the ``%%'' case) deleted.  If parameter is @
	      or *, the pattern removal operation is  applied  to  each  posi‐
	      tional  parameter  in  turn,  and the expansion is the resultant
	      list.  If parameter is an array variable subscripted with  @  or
	      *,  the  pattern	removal operation is applied to each member of
	      the array in turn, and the expansion is the resultant list.

       ${parameter/pattern/string}
	      Pattern substitution.  The pattern is expanded to produce a pat‐
	      tern  just  as in pathname expansion.  Parameter is expanded and
	      the longest match of pattern against its value is replaced  with
	      string.	If  pattern  begins with /, all matches of pattern are
	      replaced	with  string.	Normally  only	the  first  match   is
	      replaced.  If pattern begins with #, it must match at the begin‐
	      ning of the expanded value of parameter.	If pattern begins with
	      %,  it must match at the end of the expanded value of parameter.
	      If string is null, matches of pattern are deleted and the / fol‐
	      lowing pattern may be omitted.  If parameter is @ or *, the sub‐
	      stitution operation is applied to each positional  parameter  in
	      turn,  and the expansion is the resultant list.  If parameter is
	      an array variable subscripted with  @  or  *,  the  substitution
	      operation  is  applied  to each member of the array in turn, and
	      the expansion is the resultant list.

       ${parameter^pattern}
       ${parameter^^pattern}
       ${parameter,pattern}
       ${parameter,,pattern}
	      Case modification.  This expansion modifies the case  of	alpha‐
	      betic  characters in parameter.  The pattern is expanded to pro‐
	      duce a pattern just as in pathname expansion.   The  ^  operator
	      converts	lowercase letters matching pattern to uppercase; the ,
	      operator converts matching uppercase letters to lowercase.   The
	      ^^  and  ,,  expansions  convert	each  matched character in the
	      expanded value; the ^ and , expansions match  and  convert  only
	      the first character in the expanded value..  If pattern is omit‐
	      ted, it is treated like a ?, which matches every character.   If
	      parameter  is @ or *, the case modification operation is applied
	      to each positional parameter in turn, and the expansion  is  the
	      resultant  list.	 If parameter is an array variable subscripted
	      with @ or *, the case modification operation is applied to  each
	      member  of the array in turn, and the expansion is the resultant
	      list.

   Command Substitution
       Command substitution allows the output of a command to replace the com‐
       mand name.  There are two forms:

	      $(command)
       or
	      `command`

       Bash performs the expansion by executing command and replacing the com‐
       mand substitution with the standard output of  the  command,  with  any
       trailing newlines deleted.  Embedded newlines are not deleted, but they
       may be removed during word splitting.  The command  substitution  $(cat
       file) can be replaced by the equivalent but faster $(< file).

       When  the  old-style  backquote form of substitution is used, backslash
       retains its literal meaning except when followed by $, `,  or  \.   The
       first backquote not preceded by a backslash terminates the command sub‐
       stitution.  When using the $(command) form, all characters between  the
       parentheses make up the command; none are treated specially.

       Command substitutions may be nested.  To nest when using the backquoted
       form, escape the inner backquotes with backslashes.

       If the substitution appears within double quotes,  word	splitting  and
       pathname expansion are not performed on the results.

   Arithmetic Expansion
       Arithmetic  expansion allows the evaluation of an arithmetic expression
       and the substitution of the result.  The format for  arithmetic	expan‐
       sion is:

	      $((expression))

       The  old  format  $[expression]	is  deprecated	and will be removed in
       upcoming versions of bash.

       The expression is treated as if it were within  double  quotes,	but  a
       double  quote  inside  the  parentheses	is not treated specially.  All
       tokens in the expression undergo parameter expansion, string expansion,
       command	substitution, and quote removal.  Arithmetic expansions may be
       nested.

       The evaluation is performed according to the rules listed  below  under
       ARITHMETIC EVALUATION.  If expression is invalid, bash prints a message
       indicating failure and no substitution occurs.

   Process Substitution
       Process substitution is supported on systems that support  named  pipes
       (FIFOs)	or the /dev/fd method of naming open files.  It takes the form
       of <(list) or >(list).  The process list is run with its input or  out‐
       put connected to a FIFO or some file in /dev/fd.  The name of this file
       is passed as an argument to the current command as the  result  of  the
       expansion.   If the >(list) form is used, writing to the file will pro‐
       vide input for list.  If the <(list) form is used, the file  passed  as
       an argument should be read to obtain the output of list.

       When  available,  process substitution is performed simultaneously with
       parameter and variable expansion, command substitution, and  arithmetic
       expansion.

   Word Splitting
       The  shell  scans the results of parameter expansion, command substitu‐
       tion, and arithmetic expansion that did not occur within double	quotes
       for word splitting.

       The  shell  treats each character of IFS as a delimiter, and splits the
       results of the other expansions into words on these characters.	If IFS
       is  unset,  or its value is exactly <space><tab><newline>, the default,
       then sequences of <space>, <tab>, and <newline> at  the	beginning  and
       end  of	the  results  of  the previous expansions are ignored, and any
       sequence of IFS characters not  at  the	beginning  or  end  serves  to
       delimit	words.	 If  IFS  has  a  value  other	than the default, then
       sequences of the whitespace characters space and tab are ignored at the
       beginning  and  end of the word, as long as the whitespace character is
       in the value of IFS (an IFS whitespace character).   Any  character  in
       IFS  that is not IFS whitespace, along with any adjacent IFS whitespace
       characters, delimits a field.  A sequence of IFS whitespace  characters
       is  also  treated as a delimiter.  If the value of IFS is null, no word
       splitting occurs.

       Explicit null arguments ("" or '')  are	retained.   Unquoted  implicit
       null arguments, resulting from the expansion of parameters that have no
       values, are removed.  If a parameter with no value is  expanded	within
       double quotes, a null argument results and is retained.

       Note that if no expansion occurs, no splitting is performed.

   Pathname Expansion
       After  word  splitting,	unless	the -f option has been set, bash scans
       each word for the characters *, ?, and [.  If one of  these  characters
       appears,  then  the word is regarded as a pattern, and replaced with an
       alphabetically sorted list of file names matching the pattern.	If  no
       matching  file  names  are  found, and the shell option nullglob is not
       enabled, the word is left unchanged.  If the nullglob  option  is  set,
       and  no	matches are found, the word is removed.  If the failglob shell
       option is set, and no matches are found, an error  message  is  printed
       and  the  command  is  not executed.  If the shell option nocaseglob is
       enabled, the match is performed without regard to the  case  of	alpha‐
       betic  characters.   Note  that when using range expressions like [a-z]
       (see below), letters of the other case may be  included,  depending  on
       the  setting of LC_COLLATE.  When a pattern is used for pathname expan‐
       sion, the character ``.''  at the start of a name or  immediately  fol‐
       lowing a slash must be matched explicitly, unless the shell option dot‐
       glob is set.  When matching a pathname, the slash character must always
       be  matched  explicitly.   In  other cases, the ``.''  character is not
       treated specially.  See the description	of  shopt  below  under  SHELL
       BUILTIN	COMMANDS  for a description of the nocaseglob, nullglob, fail‐
       glob, and dotglob shell options.

       The GLOBIGNORE shell variable may be used to restrict the set  of  file
       names  matching	a  pattern.   If GLOBIGNORE is set, each matching file
       name that also matches one of the patterns  in  GLOBIGNORE  is  removed
       from the list of matches.  The file names ``.''	and ``..''  are always
       ignored when GLOBIGNORE is set and not null.  However, setting  GLOBIG‐
       NORE  to  a non-null value has the effect of enabling the dotglob shell
       option, so all other file names beginning with a ``.''  will match.  To
       get  the  old  behavior	of ignoring file names beginning with a ``.'',
       make ``.*''  one of the patterns in GLOBIGNORE.	The dotglob option  is
       disabled when GLOBIGNORE is unset.

       Pattern Matching

       Any character that appears in a pattern, other than the special pattern
       characters described below, matches itself.  The NUL character may  not
       occur  in  a pattern.  A backslash escapes the following character; the
       escaping backslash is discarded when  matching.	 The  special  pattern
       characters must be quoted if they are to be matched literally.

       The special pattern characters have the following meanings:

       *      Matches  any  string, including the null string.	When the glob‐
	      star shell option is enabled, and * is used in a pathname expan‐
	      sion  context,  two  adjacent  *s  used as a single pattern will
	      match all files and zero or more directories and subdirectories.
	      If  followed by a /, two adjacent *s will match only directories
	      and subdirectories.
       ?      Matches any single character.
       [...]  Matches any one of the enclosed characters.  A pair  of  charac‐
	      ters separated by a hyphen denotes a range expression; any char‐
	      acter that sorts between those two characters, inclusive,  using
	      the  current  locale's  collating sequence and character set, is
	      matched.	If the first character following the [ is a !  or a  ^
	      then  any  character not enclosed is matched.  The sorting order
	      of characters in range expressions is determined by the  current
	      locale  and  the value of the LC_COLLATE shell variable, if set.
	      A - may be matched by including it as the first or last  charac‐
	      ter in the set.  A ] may be matched by including it as the first
	      character in the set.

	      Within [ and ], character classes can  be  specified  using  the
	      syntax  [:class:],  where  class is one of the following classes
	      defined in the POSIX standard:
	      alnum alpha ascii blank cntrl  digit  graph  lower  print  punct
	      space upper word xdigit
	      A character class matches any character belonging to that class.
	      The word character class matches letters, digits, and the  char‐
	      acter _.

	      Within  [ and ], an equivalence class can be specified using the
	      syntax [=c=], which matches all characters with the same	colla‐
	      tion  weight (as defined by the current locale) as the character
	      c.

	      Within [ and ], the syntax [.symbol.] matches the collating sym‐
	      bol symbol.

       If the extglob shell option is enabled using the shopt builtin, several
       extended pattern matching operators are recognized.  In	the  following
       description, a pattern-list is a list of one or more patterns separated
       by a |.	Composite patterns may be formed using one or more of the fol‐
       lowing sub-patterns:

	      ?(pattern-list)
		     Matches zero or one occurrence of the given patterns
	      *(pattern-list)
		     Matches zero or more occurrences of the given patterns
	      +(pattern-list)
		     Matches one or more occurrences of the given patterns
	      @(pattern-list)
		     Matches one of the given patterns
	      !(pattern-list)
		     Matches anything except one of the given patterns

   Quote Removal
       After the preceding expansions, all unquoted occurrences of the charac‐
       ters \, ', and " that did not result from one of the  above  expansions
       are removed.

